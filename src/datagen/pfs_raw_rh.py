import random
from faker import Faker

from jsonl_convert import input_num_linhas, jsonl_data

faker = Faker('pt_BR')

def clean_value(value):
    """Remove caracteres não numéricos de um valor e retorna como inteiro."""
    return int("".join(filter(str.isdigit, value)))

def custom_secondary_address():
    options = ["Casa", "Ap.", "Bloco", "Fundos", "Loja"]
    return f"{random.choice(options)} {random.randint(1, 300)}"

def function_pfs_raw_rh(num_records):
    data = {'funcionarios': [], 'rh_func_gerente_loja': [], 'rh_hist_func': []}
    for _ in range(num_records):
        criar_funcionarios = {
            'ID': faker.random_number(digits=5, fix_len=True),
            'NOME': faker.name(),
            'NOME_USUAL': faker.name(),
            'ENDERECO': faker.street_address(),
            'NRO_END': faker.building_number(),
            'COMPLEMENTO_END': custom_secondary_address(),
            'BAIRRO': faker.street_name(),
            'CIDADE': faker.city(),
            'ESTADO': faker.state(),
            'CEP': faker.postcode(),
            'TELEFONE': faker.phone_number(),
            'CODIGO_DDD': faker.random_number(digits=2, fix_len=True),
            'RAMAL': faker.random_number(digits=4, fix_len=True),
            'ESTADO_CIVIL': faker.random_element(elements=['Solteiro', 'Casado', 'Divorciado', 'Viúvo']),
            'SEXO': faker.random_element(elements=['Masculino', 'Feminino']),
            'DATA_NASCIMENTO': faker.date_time_between(start_date='-60y', end_date='-18y').strftime('%Y-%m-%d %H:%M:%S'),
            'CIDADE_NASCIMENTO': faker.city(),
            'ESTADO_NASCIMENTO': faker.state(),
            'PAIS_NASCIMENTO': faker.country(),
            'NACIONALIDADE': faker.country(),
            'NATURALIZADO': faker.random_element(elements=['Sim', 'Não']),
            'DATA_CHEGADA_PAIS': faker.date_time_between(start_date='-60y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'NRO_CARTEIRA_MODELO_19': faker.bothify(text='###########'),
            'CART_PROFISSIONAL_NRO': faker.random_number(digits=8, fix_len=True),
            'CART_PROFISSIONAL_SERIE': faker.random_number(digits=3, fix_len=True),
            'CART_PROFISSIONAL_LETRA': faker.random_element(elements=['A', 'B', 'C', 'D', 'E']),
            'CART_PROFISSIONAL_EST_EMISSOR': faker.state(),
            'PIS_NRO': faker.random_number(digits=10, fix_len=True),
            'RG_NRO': faker.random_number(digits=10, fix_len=True),
            'RG_COMPLEMENTO': faker.random_element(elements=['', 'X']),
            'RG_ESTADO_EMISSOR': faker.state(),
            'RG_ORGAO_EMISSOR': faker.word(),
            'CIC_NRO': faker.random_number(digits=8, fix_len=True),
            'COMPLEMENTO_CIC_NRO': faker.random_number(digits=2, fix_len=True),
            'TITULO_ELEITOR_NRO': faker.random_number(digits=10, fix_len=True),
            'TITULO_ELEITOR_SECAO': faker.random_number(digits=3, fix_len=True),
            'TITULO_ELEITOR_ZONA': faker.random_number(digits=2, fix_len=True),
            'CERT_RESERVISTA_NRO': faker.bothify(text='###########'),
            'COMPLEMENTO_CERT_RESERVISTA': faker.random_element(elements=['', 'X']),
            'CART_HABILITACAO_NRO': faker.random_number(digits=10, fix_len=True),
            'CART_HABILITACAO_CATEGORIA': faker.random_element(elements=['A', 'B', 'C', 'D', 'E']),
            'GRAU_ESCOLARIDADE': faker.random_element(elements=['Ensino Fundamental', 'Ensino Médio', 'Ensino Superior']),
            'DATA_ADMISSAO': faker.date_time_between(start_date='-10y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'NRO_LEGAL': faker.random_number(digits=10, fix_len=True),
            'CONTA_FGTS_NRO': faker.bothify(text='###########'),
            'CONTA_FGTS_DIGITO': faker.random_digit(),
            'DATA_OPC_FGTS': faker.date_time_between(start_date='-10y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'DATA_ESTABILIDADE': faker.date_time_between(start_date='-10y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'ID_HORARIO': faker.random_number(digits=3, fix_len=True),
            'NOME_PAI': faker.name(),
            'NOME_MAE': faker.name(),
            'NACIONALIDADE_PAI': faker.country(),
            'NACIONALIDADE_MAE': faker.country(),
            'NOME_TUTOR': faker.name(),
            'RECEBE_CREDITO_BANCO': faker.random_element(elements=['Sim', 'Não']),
            'CODIGO_BANCO': faker.random_number(digits=3, fix_len=True),
            'CODIGO_AGENCIA': faker.bothify(text='####'),
            'CONTA_NUMERO': faker.bothify(text='########'),
            'CONTA_DIGITO': faker.random_digit(),
            'NRO_DEPENDENTES_IR': faker.random_number(digits=2, fix_len=True),
            'NRO_DEPENDENTES_SALFAMI': faker.random_number(digits=2, fix_len=True),
            'VALOR_INSS_FIXO': faker.random_number(digits=6, fix_len=True),
            'ATIVO': faker.random_element(elements=['Sim', 'Não']),
            'NRO_CHAPEIRA': faker.bothify(text='######'),
            'SINDICALIZADO': faker.random_number(digits=1, fix_len=True),
            'COD_UNIORG': faker.bothify(text='#####'),
            'ID_REGIAO': faker.random_number(digits=2, fix_len=True),
            'CIC_PROPRIO': faker.random_element(elements=['Sim', 'Não']),
            'APOSENTADO': faker.random_element(elements=['Sim', 'Não']),
            'SEGUNDO_EMPREGO': faker.random_element(elements=['Sim', 'Não']),
            'UNIORG_CGC': faker.bothify(text='########-##'),
            'ID_CARGO': faker.random_number(digits=3, fix_len=True),
            'ID_DESCRICAO': faker.random_number(digits=3, fix_len=True),
            'REGIME': faker.word(),
            'ID_TIPO_FOLHA': faker.word(),
            'BASE_ORIGEM': faker.word(),
            'ORGAO_CLASSE': faker.word(),
            'REGIAO_CLASSE': faker.word(),
            'NRO_REG_CLASSE': faker.word(),
            'TIPO_COLAB': faker.word(),
            'BASE_ORIGEM_MUNICIPIO': faker.word(),
            'COD_TIPO_SANGUE': faker.word(),
            'FATOR_RH': faker.random_element(elements=['+', '-']),
            'COD_LOCALIZACAO': faker.word(),
            'NRO_BENEFICIO_INSS': faker.random_number(digits=10, fix_len=True),
            'CTR_PONTO': faker.random_element(elements=['Sim', 'Não']),
            'SIND_CATEGORIA': faker.random_number(digits=2, fix_len=True),
            'MOTIVO_CONTRATACAO': faker.random_number(digits=2, fix_len=True),
            'TIPO_PAGTO': faker.random_number(digits=2, fix_len=True),
            'SIND_PREDOMINANTE': faker.random_number(digits=2, fix_len=True),
            'FLG_HORARIO_FLEXIVEL': faker.random_element(elements=['Sim', 'Não']),
            'NUM_VIA_CRACHA': faker.random_number(digits=2, fix_len=True),
            'DAT_EMISSAO_CRACHA': faker.date_time_between(start_date='-1y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'NOM_USER_ATU': faker.name(),
            'DAT_ULT_ATU': faker.date_time_between(start_date='-1y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'ID_CIEE': faker.random_number(digits=5, fix_len=True),
            'VAL_BOLSA_TRANSPORTE': faker.random_number(digits=6, fix_len=True),
            'COR_PESSOA': faker.random_number(digits=2, fix_len=True),
            'DEFICIENCIA_FISICA': faker.random_element(elements=['Sim', 'Não']),
            'DATA_CASAMENTO': faker.date_time_between(start_date='-30y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'TIPO_VISTO': faker.word(),
            'APOSENTADO_DATA': faker.date_time_between(start_date='-10y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'CART_PROFISSIONAL_DATA': faker.date_time_between(start_date='-10y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'RG_DATA': faker.date_time_between(start_date='-10y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'TITULO_ELEITOR_DATA': faker.date_time_between(start_date='-10y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'PIS_DATA': faker.date_time_between(start_date='-10y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'DATA_VALIDADE_RNE': faker.date_time_between(start_date='-1y', end_date='+10y').strftime('%Y-%m-%d %H:%M:%S'),
            'EMAIL': faker.email(),
            'USUARIO_REDE': faker.user_name(),
            'COD_UNIORG_AREA': faker.bothify(text='#####'),
            'OBSERVACOES': faker.paragraph(),
            'EMAIL_PESSOAL': faker.email(),
            'COD_CCUSTO': faker.bothify(text='#####'),
            'USUARIO_PORTAL': faker.user_name(),
            'PRIMEIRO_EMPREGO': faker.random_element(elements=['Sim', 'Não']),
            'COD_MOTIVO_ESTABILIDADE': faker.random_number(digits=2, fix_len=True),
            'DAT_ESTABILIDADE_FINAL': faker.date_time_between(start_date='-1y', end_date='+10y').strftime('%Y-%m-%d %H:%M:%S'),
            'COD_DDD_CELULAR': faker.random_number(digits=2, fix_len=True),
            'NUM_CELULAR': faker.phone_number(),
            'COD_PRESTADORA': faker.random_number(digits=3, fix_len=True),
            'COD_TIP_DEFICIENCIA': faker.random_number(digits=2, fix_len=True),
            'FLG_LIB_DOC': faker.random_element(elements=['Sim', 'Não']),
            'FLG_RELOGIO_BIOMETRICO': faker.random_element(elements=['Sim', 'Não']),
            'NOM_FUNC_ESOCIAL': faker.name(),
            'NOM_MAE_ESOCIAL': faker.name(),
            'NUM_CNS': faker.bothify(text='###########'),
            'NOM_PAI_ESOCIAL': faker.name(),
            'DAT_EXPED_ORGAO_CLASSE': faker.date_time_between(start_date='-10y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'DAT_VALID_ORGAO_CLASSE': faker.date_time_between(start_date='-1y', end_date='+10y').strftime('%Y-%m-%d %H:%M:%S')
        }
        data['funcionarios'].append(criar_funcionarios)

        criar_rh_func_gerente_loja = {
            'COD_UNIORG_CGC': faker.bothify(text='########-##'),
            'COD_FUNC': criar_funcionarios['ID'],
            'DAT_INICIO': faker.date_time_between(start_date='-10y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'DAT_FIM': faker.date_time_between(start_date='-1y', end_date='+10y').strftime('%Y-%m-%d %H:%M:%S'),
            'PER_INDICE_COMPART': faker.random_number(digits=5, fix_len=True),
            'FLG_LOJA_BASE': faker.random_element(elements=['Sim', 'Não']),
            'NOM_USER_ATU': faker.name(),
            'DAT_ULT_ATU': faker.date_time_between(start_date='-1y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S')
        }
        data['rh_func_gerente_loja'].append(criar_rh_func_gerente_loja)

        criar_rh_hist_func = {
            'DAT_MES_REF': faker.random_number(digits=2, fix_len=True),
            'DAT_ANO_REF': faker.year(),
            'COD_FUNC': criar_funcionarios['ID'],
            'NOM_FUNC': criar_funcionarios['NOME'],
            'COD_SITUACAO': faker.random_number(digits=2, fix_len=True),
            'DAT_SITUACAO': faker.date_time_between(start_date='-10y', end_date='-1y').strftime('%Y-%m-%d %H:%M:%S'),
            'COD_UNIORG_CGC': faker.bothify(text='########-##'),
            'COD_UNIORG': faker.bothify(text='#####'),
            'COD_CARGO': faker.random_number(digits=3, fix_len=True),
            'COD_REGIME': faker.word(),
            'COD_HORARIO': faker.random_number(digits=3, fix_len=True),
            'TIP_FOLHA': faker.word(),
            'TIP_COLAB': faker.word(),
            'TIP_PAGTO': faker.random_number(digits=2, fix_len=True),
            'COD_BANCO': faker.random_number(digits=3, fix_len=True),
            'COD_AGENCIA': faker.bothify(text='####'),
            'NUM_CONTA_CORR': faker.bothify(text='########'),
            'NUM_DIG_CONTA_CORR': faker.random_digit(),
            'NUM_DEP_IR': faker.random_number(digits=2, fix_len=True),
            'NUM_DEP_SAL_FAMILIA': faker.random_number(digits=2, fix_len=True),
            'COD_SIND_CATEG': faker.random_number(digits=2, fix_len=True),
            'COD_SIND_PREDOM': faker.random_number(digits=2, fix_len=True),
            'COD_LOJA_GERENTE': faker.bothify(text='#####'),
            'PER_AJUDA_CUSTO': faker.random_number(digits=5, fix_len=True),
            'COD_UNIORG_AREA': faker.bothify(text='#####'),
            'COD_CCUSTO': faker.bothify(text='#####'),
            'FLG_CONFIDENCIAL': faker.random_element(elements=['Sim', 'Não']),
            'NUM_CPF': faker.bothify(text='###########'),
            'NUM_COMPL_CPF': faker.random_digit(),
            'FLG_CPF_PROPRIO': faker.random_element(elements=['Sim', 'Não'])
        }
        data['rh_hist_func'].append(criar_rh_hist_func)

    jsonl_data(data=data)
    return data

num_records = input_num_linhas()
function_pfs_raw_rh(num_records)