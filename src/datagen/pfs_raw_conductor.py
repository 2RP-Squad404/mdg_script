import random
from faker import Faker

from jsonl_convert import jsonl_data,input_num_linhas

faker = Faker('pt_BR')

def generate_secondary_address():
    options = ["Apt.", "Suite", "Unit", "Floor"]
    number = random.randint(1, 999)
    return f"{random.choice(options)} {number}"

def function_pfs_raw_conductor(num_records):
    data = {'adesao_debito_automatico': [],'adesao_pacote_tarifa': [],'autorizacao': [],'autorizacoes_detalhes': [],'boleto_emitido': [],'cartao': [],'cliente': [],'cliente_complemento': [],'conta': [],'controle_vencimento': [],'dado_bancario_conta': [],'estabelecimento': [],'estabelecimento_externo': [],'estado_conta': [],'evento_externo_ajuste': [],'evento_externo_compra_nao_processado': [],'evento_externo_compra_processado': [],'evento_externo_pagamento': [],'debito_recorrente': [],'fatura': [],'grade_produto': [],'integracao_grade': [],'limite_disponibilidade': [],'limite_portador': [],'parcelamento_fatura': [],'produto': [],'refinanciamento': [],'seguro_adesao_item': [],'seguro_endereco': [],'seguro_pessoa': [],'transacao_corrente': []}

    for _ in range(num_records):
        criar_adesao_debito_automatico = {
            'hash_key': faker.uuid4(),
            'source': faker.date_time().strftime('%Y%m%d%H%M%S'),
            'id': faker.random_int(min=1, max=1000000),
            'dataadesao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'id_contadigital': faker.random_int(min=10000000, max=99999999),
            'id_contacredito': faker.random_int(min=10000000, max=99999999),
            'id_tipodebitoautomatico': faker.random_int(min=1, max=10),
            'descricaotipodebitoautomatico': faker.word(),
            'responsavel': faker.word(),
            'datacancelamento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'responsavelcancelamento': faker.word(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=('INSERT', 'UPDATE', 'DELETE')),
            'operation_sequence': faker.random_int(min=1, max=100000),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['adesao_debito_automatico'].append(criar_adesao_debito_automatico)

        criar_adesao_pacote_tarifa = {
            'hash_key': faker.uuid4(),
            'source': faker.date_time().strftime('%Y%m%d%H%M%S'),
            'ac_id_conta': faker.random_int(min=10000000, max=99999999),
            'pt_id_pacotetarifa': faker.random_int(min=1, max=10),
            'pt_descricaopacotetarifa': faker.word(),
            'ac_valortarifa': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ac_dataativacao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ac_datadesativacao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ac_datafimciclo': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=('INSERT', 'UPDATE', 'DELETE')),
            'operation_sequence': faker.random_int(min=1, max=100000),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['adesao_pacote_tarifa'].append(criar_adesao_pacote_tarifa)

        criar_autorizacao = {
            'hash_key': faker.uuid4(),
            'source': faker.date_time().strftime('%Y%m%d%H%M%S'),
            'me_id_mensagem': faker.random_int(min=1000000000, max=9999999999),
            'me_datahora': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'me_tipotransacao': faker.bothify(text='????'),
            'me_ip_servico': faker.ipv6(),
            'me_ip_atf': faker.ipv4(),
            'me_codigoprocessamento': faker.bothify(text='?????'),
            'me_codigoprocessamentosecundario': faker.bothify(text='?????'),
            'me_numeroestabelecimento': faker.random_int(min=1, max=1000),
            'me_dvnumeroestabelecimento': faker.bothify(text='?'),
            'me_nsuorigem': faker.random_int(min=1000, max=9999),
            'me_id_tipoterminal': faker.random_int(min=1, max=10),
            'me_terminal': faker.bothify(text='??########'),
            'me_versao': faker.word(),
            'me_cartao': faker.credit_card_number(),
            'me_valor': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'me_parcelas': faker.random_int(min=0, max=24),
            'me_datavalidade': faker.credit_card_expire(),
            'me_codigodesbloqueio': faker.bothify(text='????'),
            'me_codigodebarras': faker.bothify(text='??########'),
            'me_codigoinstituicao': faker.bothify(text='??########'),
            'me_dadostransacaooriginal': faker.bothify(text='????????????????????????????????'),
            'me_dadosultimatransacao': faker.bothify(text='????????????????????????????????'),
            'me_tipoaberturafechamento': faker.bothify(text='???'),
            'me_datahoralocal': faker.date_time().strftime('%y%m%H%M%S'),
            'me_datalocal': faker.date_between(start_date='-30y', end_date='today').strftime('%m%d'),
            'me_horalocal': faker.date_between(start_date='-30y', end_date='today').strftime('%H%M%S'),
            'me_modoentrada': faker.bothify(text='????'),
            'me_nsuhostcancelar': faker.random_int(min=100000000, max=999999999),
            'me_codigorespostaterminal': faker.bothify(text='??'),
            'me_tipoterminal': faker.bothify(text='??????????'),
            'me_trilhacartao': faker.bothify(text='????????????????????????????????'),
            'me_chavesessao': faker.bothify(text='????????????????????????????????'),
            'me_id_fornecedor': faker.bothify(text='???'),
            'me_id_modelo': faker.bothify(text='???'),
            'me_serieperiferico': faker.bothify(text='?????'),
            'me_versaoperiferico': faker.word(),
            'me_cupom': faker.bothify(text='????????'),
            'me_mcc': faker.random_int(min=1000, max=9999),
            'me_codcondicaopos': faker.bothify(text='??'),
            'me_numerorefenciarecebimento': faker.bothify(text='?'),
            'me_codigoservico': faker.random_int(min=1000, max=9999),
            'me_nomeestabelecimento': faker.company(),
            'me_trilha01': faker.bothify(text='????????????????????????????????'),
            'me_codigomoeda': faker.random_int(min=100, max=1000),
            'me_infoadicionalpos': faker.bothify(text='????????'),
            'me_valordispensado': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'me_identificacaotransacao': faker.bothify(text='??########'),
            'me_valorsubtituicao': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'me_configentrada': faker.bothify(text='??'),
            'me_cvvresultcode': faker.random_int(min=0, max=10),
            'me_cvv2resultcode': faker.bothify(text='??'),
            'me_codigoautorizacao': faker.bothify(text='??????'),
            'me_codigoresposta': faker.bothify(text='??'),
            'me_codigomoedadestino': faker.bothify(text='???'),
            'me_valordestino': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'me_id_cartao': faker.random_int(min=10000000, max=99999999),
            'me_id_capacidadedevice': faker.bothify(text='?'),
            'me_lifecicleauthorization': faker.random_int(min=1, max=100),
            'me_id_tipoestabelecimentopreautorizacao': faker.random_element(elements=('R', 'C')),
            'me_codigopostal': faker.postcode(),
            'me_codigopais': faker.country_code(),
            'me_id_nivelseguranca': faker.bothify(text='??'),
            'me_dadosadicionais': faker.bothify(text='??????'),
            'me_numeroestabelecimento_externo': faker.random_int(min=1, max=1000),
            'me_id_emissorredecompartilhada': faker.random_int(min=1, max=100),
            'me_standinreasoncode': faker.random_int(min=0, max=1000000),
            'me_codigooperador': faker.bothify(text='????????'),
            'me_flagtransacaocomsenha': faker.boolean(),
            'me_dadosparcelamentovendaemissor': faker.bothify(text='????????????????????????????????'),
            'me_flagtransacaocomcvv1': faker.boolean(),
            'me_flagtransacaocomcvv2': faker.boolean(),
            'me_flagtransacaocomcvv3': faker.boolean(),
            'me_flagtransacaotokenizada': faker.boolean(),
            'tt_id_tipoterminal': faker.random_int(min=1, max=10),
            'tt_descricaoterminal': faker.word(),
            'tt_origem': faker.random_element(elements=('PDV', 'BII', 'ELO', 'LST')),
            'tt_flagcancelamentonsubit90': faker.boolean(),
            'tt_flagresolveultimatransacao': faker.boolean(),
            'tt_flagcontroleabertura': faker.boolean(),
            'tt_flagsonda': faker.boolean(),
            'tt_codpinblock': faker.random_int(min=1, max=10),
            'tt_tipochave': faker.word(),
            'tt_aceitatransacaochip': faker.boolean(),
            'cp_codigoprocessamento': faker.bothify(text='?????'),
            'cp_transacao': faker.bothify(text='????'),
            'cp_descricao': faker.sentence(),
            'cp_tipobuscadadosoperacao': faker.random_int(min=0, max=5),
            'cp_flaggravafraude': faker.boolean(),
            'ms_id_mensagem': faker.random_int(min=1000000000, max=9999999999),
            'ms_datahora': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ms_codigoautorizacao': faker.bothify(text='??????'),
            'ms_informacoesadicionais': faker.sentence(),
            'ms_nomeportador': faker.name(),
            'ms_nsuhost': faker.random_int(min=1000000, max=9999999),
            'ms_codigoresposta': faker.bothify(text='??'),
            'ms_datacorrespondente': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d'),
            'ms_dadoshost': faker.sentence(),
            'ms_id_emissor': faker.random_int(min=1, max=100),
            'ms_codigodescricao': faker.random_int(min=0, max=1000),
            'ms_flagvalidousenha': faker.boolean(),
            'ms_flagvalidoucvv1': faker.boolean(),
            'ms_flagvalidoucvv2': faker.boolean(),
            'ms_flagvalidoucvv3': faker.boolean(),
            'ms_flagvalidoucriptograma': faker.boolean(),
            'ms_dadosadicionais': faker.sentence(),
            'dtn_codigodescricao': faker.random_int(min=0, max=1000),
            'dtn_descricaoaplicativo': faker.sentence(),
            'dtn_flagenvioterminal': faker.boolean(),
            'dtn_descricaoterminal': faker.sentence(),
            'ra_codigoresposta': faker.bothify(text='??'),
            'ra_descricao': faker.sentence(),
            'aut_id_autorizacao': faker.random_int(min=100000000, max=999999999),
            'aut_codigoautorizacao': faker.bothify(text='??????'),
            'aut_nsuorigem': faker.random_int(min=100000, max=999999),
            'aut_cartao': faker.credit_card_number(),
            'aut_numeroestabelecimento': faker.random_int(min=1, max=1000),
            'aut_dataautorizacao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'aut_origem': faker.random_element(elements=('MCD', 'PDV', 'ELO', 'API', 'ATM')),
            'aut_valor': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'aut_id_operacao': faker.random_int(min=1, max=1000),
            'aut_numeroparcelas': faker.random_int(min=1, max=24),
            'aut_terminal': faker.bothify(text='??########'),
            'aut_status': faker.random_int(min=0, max=10),
            'aut_id_emissor': faker.random_int(min=1, max=100),
            'aut_flagparticipapromocao': faker.boolean(),
            'aut_referencenumber': faker.bothify(text='?????????????'),
            'aut_identificacaotransacao': faker.random_int(min=100000000000000000, max=999999999999999999),
            'aut_modoentrada': faker.bothify(text='??'),
            'aut_codcondicaopos': faker.bothify(text='??'),
            'aut_id_capacidadedevice': faker.bothify(text='?'),
            'aut_id_tipoestabelecimentopreautorizacao': faker.random_element(elements=('R', 'C')),
            'aut_id_cartao': faker.random_int(min=10000000, max=99999999),
            'aut_datalocal': faker.date_between(start_date='-30y', end_date='today').strftime('%m%d'),
            'aut_horalocal': faker.date_between(start_date='-30y', end_date='today').strftime('%H%M%S'),
            'aut_flagtransacaocomsenha': faker.boolean(),
            'aut_flagautorizadostandin': faker.boolean(),
            'aut_motivoautorizadostandin': faker.sentence(),
            'aut_id_mensagementrada': faker.random_int(min=1000000000, max=9999999999),
            'aut_estabelecimentoautenticado': faker.boolean(),
            'aut_flagaprovacaoparcial': faker.boolean(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=('INSERT', 'UPDATE', 'DELETE')),
            'operation_sequence': faker.random_int(min=1, max=100000),
            'me_transactionuuid': faker.uuid4(),
            'ra_codigodescricaoodin': faker.random_int(min=1, max=1000),
            'ra_descricaoodim': faker.sentence(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d'),
            'me_flagtransacao3ds': faker.boolean(),
            'me_origemautenticacao3ds': faker.sentence(),
            'ra_aplicacao': faker.random_element(elements=('Autorizador', 'Odin')),
            'me_flagpreautorizacao': faker.boolean(),
            'aut_taxaptax': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'aut_taxacartao': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'aut_taxaiofinternacional': faker.pyfloat(left_digits=1, right_digits=2, positive=True)
        }
        data['autorizacao'].append(criar_autorizacao)

        criar_autorizacoes_detalhes = {
            'hash_key': faker.uuid4(),
            'source': faker.date_time().strftime('%Y%m%d%H%M%S'),
            'id': faker.random_int(min=100000000, max=999999999),
            'uuid': faker.uuid4(),
            'jarvis_score': faker.random_int(min=1, max=1000),
            'fraude_rule_score': faker.random_int(min=0, max=100),
            'fraude_reason_code': faker.random_int(min=0, max=100),
            'fraude_reason_code2': faker.random_int(min=0, max=100),
            'fraude_reason_code3': faker.random_int(min=0, max=100),
            'cidade': faker.city(),
            'pais': faker.country_code(),
            'cep': faker.postcode(),
            'token': faker.bothify(text='????????????????'),
            'id_token': faker.random_int(min=0, max=1000),
            'data_autorizacao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S'),
            'indicador_comercio_eletronico': faker.sentence(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=('INSERT', 'UPDATE', 'DELETE')),
            'operation_sequence': faker.random_int(min=1, max=100000),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['autorizacoes_detalhes'].append(criar_autorizacoes_detalhes)

        criar_boleto_emitido = {
            'hash_key': faker.uuid4(),
            'source': faker.date_time().strftime('%Y%m%d%H%M%S'),
            'be_id_boleto': faker.random_int(min=10000000, max=99999999),
            'be_id_tipoboleto': faker.random_int(min=1, max=10),
            'tb_descricaotipoboleto': faker.word(),
            'be_id_conta': faker.random_int(min=10000000, max=99999999),
            'be_dataemissao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'be_statusboleto': faker.random_element(elements=('Pago', 'Rejeitado', 'Registrado')),
            'be_situacaoboleto': faker.sentence(),
            'be_valorboleto': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'be_datavencimento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'be_nossonumero': faker.bothify(text='########'),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=('INSERT', 'UPDATE', 'DELETE')),
            'operation_sequence': faker.random_int(min=1, max=100000),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['boleto_emitido'].append(criar_boleto_emitido)

        criar_cartao = {
            'hash_key': faker.uuid4(),
            'source': faker.date_time().strftime('%Y%m%d%H%M%S'),
            'ca_cartao': faker.credit_card_number(),
            'ca_id_emissor': faker.random_int(min=1, max=100),
            'ca_id_filial': faker.random_int(min=0, max=1000),
            'ca_id_conta': faker.random_int(min=10000000, max=99999999),
            'ca_bin': faker.random_int(min=100000, max=999999),
            'ca_conta': faker.random_int(min=1000, max=9999),
            'ca_sequencialcartao': faker.random_int(min=1, max=1000000),
            'ca_digitoverificador1': faker.random_int(min=0, max=9),
            'ca_digitoverificador2': faker.random_int(min=0, max=9),
            'ca_portador': faker.random_int(min=1, max=10),
            'ca_dataemissao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ca_datavalidade': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ca_status': faker.random_int(min=0, max=10),
            'ca_id_pessoafisica': faker.random_int(min=1000000, max=9999999),
            'ca_statusdata': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ca_estagio': faker.random_int(min=0, max=10),
            'ca_dataestagio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ca_arquivolote': faker.file_path(),
            'ca_codigodesbloqueio': faker.bothify(text='????'),
            'ca_codigocancelamento': faker.bothify(text='????'),
            'ca_sequencialanterior': faker.random_int(min=0, max=1000000),
            'ca_qtdsenhasincorretas': faker.random_int(min=0, max=10),
            'ca_senhavisa': faker.bothify(text='????'),
            'ca_senhavisacriptografada': faker.bothify(text='????????????????????????????????'),
            'ca_flaggeracartasenha': faker.random_int(min=0, max=1),
            'ca_flagprovisorio': faker.boolean(),
            'ca_id_cartao': faker.random_int(min=10000000, max=99999999),
            'ca_cartaohash': faker.random_int(min=1000000000, max=9999999999),
            'ca_criptografiahsm': faker.bothify(text='????????????????????????????????'),
            'ca_id_binschave': faker.random_int(min=1, max=1000),
            'ca_numerocartaooriginal': faker.credit_card_number(),
            'ca_flagembossadoloja': faker.boolean(),
            'ca_senhavisaanterior': faker.bothify(text='????'),
            'ca_id_embossing': faker.random_int(min=1, max=1000),
            'ca_dataembossing': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ca_flag2viacartasenha': faker.random_int(min=0, max=1),
            'ca_id_imagem': faker.random_int(min=1, max=1000),
            'ca_qtdevezespermitedesbloqueio': faker.random_int(min=1, max=10),
            'ca_senhavisapendente': faker.bothify(text='????'),
            'ca_senhavisacriptopendente': faker.bothify(text='????????????????????????????????'),
            'ca_senhavisacriptoanterior': faker.bothify(text='????????????????????????????????'),
            'ca_id_servicecode': faker.random_int(min=1, max=1000),
            'sca_id_statuscartao': faker.random_int(min=0, max=10),
            'sca_status': faker.random_int(min=0, max=10),
            'sca_descricao': faker.sentence(),
            'sca_respautorizador': faker.bothify(text='??'),
            'sca_flagreemitecartao': faker.boolean(),
            'sca_flagcobratarifa': faker.boolean(),
            'sca_flagemiteprovisorio': faker.boolean(),
            'sca_flagalteranome': faker.boolean(),
            'sca_flagcancelaconta': faker.boolean(),
            'sca_statusdestinoconta': faker.random_int(min=0, max=10),
            'sca_flagalterastatus': faker.boolean(),
            'sca_flagcancelamento': faker.boolean(),
            'sca_respautorizadoratm': faker.bothify(text='??'),
            'sca_flagcadastrosenha': faker.random_int(min=0, max=1),
            'sca_flagcadastranovasenha': faker.random_int(min=0, max=1),
            'sca_flagofereceseguroatdo': faker.random_element(elements=('0', '1')),
            'sca_statusdestinodesbloqueio': faker.random_int(min=0, max=10),
            'sca_flagreemitemigracao': faker.boolean(),
            'sca_statusdestinomigracao': faker.random_int(min=0, max=10),
            'sca_statusreemissaomigracao': faker.random_int(min=0, max=10),
            'sca_flagpermitedesbloqueio': faker.boolean(),
            'sca_flagcancelardesbloqueio': faker.boolean(),
            'sca_respautorizadorvisa': faker.bothify(text='??'),
            'sca_flagbloqueiosenhaincorreta': faker.boolean(),
            'sca_respautorizadormastercard': faker.bothify(text='??'),
            'sca_flagreversivel': faker.boolean(),
            'sca_flagstatusfraude': faker.boolean(),
            'sca_flagavisaemissor': faker.boolean(),
            'sca_flagprepago': faker.boolean(),
            'sca_flagenviaexceptionfile': faker.boolean(),
            'sca_id_motivoembossing': faker.random_int(min=1, max=1000),
            'sca_flagfaztransferencia': faker.boolean(),
            'sca_flagrecebetransferencia': faker.boolean(),
            'sca_flagexibevalorreemissao': faker.boolean(),
            'sca_flagreemiteautcartao': faker.boolean(),
            'sca_respautorizadormasterrepower': faker.bothify(text='??'),
            'sca_flagpermitebloqueio': faker.random_int(min=0, max=1),
            'pt_portador': faker.random_int(min=1, max=10),
            'pt_id_conta': faker.random_int(min=10000000, max=99999999),
            'pt_id_emissor': faker.random_int(min=1, max=100),
            'pt_id_produto': faker.random_int(min=1, max=1000),
            'pt_id_pessoafisica': faker.random_int(min=1000000, max=9999999),
            'pt_nomeplastico': faker.name(),
            'pt_datainclusao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'pt_datacancelamento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'pt_parentesco': faker.word(),
            'pt_observacao': faker.sentence(),
            'pt_codigoparentesco': faker.random_int(min=1, max=100),
            'pt_flagativo': faker.random_int(min=0, max=1),
            'pt_senha': faker.bothify(text='????'),
            'pt_datasuspensaosenhaatm': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'pt_tentativaserrosenhaatm': faker.random_int(min=0, max=10),
            'pt_tipoportador': faker.random_int(min=1, max=10),
            'pt_tentativaserrosenhavisa': faker.random_int(min=0, max=10),
            'pt_id_imagem': faker.random_int(min=1, max=1000),
            'pt_numerofidelidade': faker.bothify(text='??########'),
            'ec_id_estagiocartao': faker.random_int(min=0, max=10),
            'ec_estagio': faker.random_int(min=0, max=10),
            'ec_descricao': faker.sentence(),
            'ec_flagcancelacartao': faker.boolean(),
            'bc_id_binschaves': faker.random_int(min=1, max=1000),
            'bc_bin': faker.random_int(min=100000, max=999999),
            'bc_id_tipochave': faker.random_int(min=1, max=10),
            'bc_chave': faker.bothify(text='????????????????????????????????'),
            'bc_checkvalue': faker.bothify(text='????????'),
            'bc_id_produtoentidade': faker.random_int(min=1, max=1000),
            'bc_validade': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'bc_flagdescriptografado': faker.boolean(),
            'bc_label': faker.word(),
            'bc_responsavel': faker.name(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=('INSERT', 'UPDATE', 'DELETE')),
            'operation_sequence': faker.random_int(min=1, max=100000),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['cartao'].append(criar_cartao)

        criar_cliente = {
            'hash_key': faker.uuid4(),
            'source': faker.word(),
            'pf_id_pessoafisica': faker.random_int(min=1000000, max=9999999),
            'pf_id_emissor': faker.random_int(min=1, max=10),
            'pf_nome': faker.name(),
            'pf_cpf': faker.cpf(),
            'pf_datanascimento': faker.date_of_birth().strftime('%Y-%m-%dT%H:%M:%S'),
            'pf_sexo': random.choice(['F', 'M']),
            'pf_numeroidentidade': faker.bothify(text='?###########'),
            'pf_orgaoidentidade': faker.word(),
            'pf_estadoidentidade': faker.state_abbr(),
            'pf_dataemissaoidentidade': faker.date_this_decade().strftime('%Y-%m-%dT%H:%M:%S'),
            'pf_cic': faker.random_number(digits=1, fix_len=True),
            'pf_statuscic': faker.random_int(min=0, max=10),
            'pf_flagalteracaocic': faker.random_int(min=0, max=1),
            'pf_flagdeficientevisual': faker.boolean(),
            'pf_tipopessoa': faker.random_int(min=0, max=1),
            'pf_statuspf': faker.random_int(min=0, max=10),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S%z'),
            'operation': random.choice(['INSERT', 'A_UPDATE']),
            'operation_sequence': faker.random_int(min=1, max=1000),
            'production_date': faker.date_this_year().strftime('%Y-%m-%d')
        }
        data['cliente'].append(criar_cliente)

        criar_cliente_complemento = {
            'hash_key': faker.uuid4(),
            'source': faker.word(),
            'pfc_id_pessoafisica': faker.random_int(min=10000000, max=99999999),
            'pfc_id_emissor': faker.random_int(min=1, max=10),
            'pfc_nomemae': faker.name(),
            'pfc_nomepai': faker.name(),
            'pfc_estadocivil': faker.random_int(min=1, max=9),
            'pfc_numerodependentes': faker.random_int(min=0, max=10),
            'pfc_naturalidadecidade': faker.city(),
            'pfc_naturalidadeestado': faker.state_abbr(),
            'pfc_nacionalidade': faker.random_int(min=1, max=10),
            'pfc_empresa': faker.company(),
            'pfc_ramo': faker.job(),
            'pfc_tempotrabalhoanos': faker.random_int(min=0, max=50),
            'pfc_tempotrabalhomeses': faker.random_int(min=0, max=11),
            'pfc_tempocompraloja': faker.word(),
            'pfc_distanciaresidencialoja': faker.random_int(min=0, max=100),
            'pfc_profissao': faker.job(),
            'pfc_salario': faker.pyfloat(min_value=1000, max_value=100000, right_digits=2),
            'pfc_outrasrendas': faker.pyfloat(min_value=0, max_value=50000, right_digits=2),
            'pfc_origemoutrasrendas': faker.word(),
            'pfc_cgc': faker.cnpj(),
            'pfc_empresaanterior': faker.company(),
            'pfc_imovel1': faker.word(),
            'pfc_cidade1': faker.city(),
            'pfc_estado1': faker.state_abbr(),
            'pfc_valorimovel1': faker.pyfloat(min_value=0, max_value=1000000, right_digits=2),
            'pfc_imovel2': faker.word(),
            'pfc_cidade2': faker.city(),
            'pfc_estado2': faker.state_abbr(),
            'pfc_valorimovel2': faker.pyfloat(min_value=0, max_value=1000000, right_digits=2),
            'pfc_imovel3': faker.word(),
            'pfc_cidade3': faker.city(),
            'pfc_estado3': faker.state_abbr(),
            'pfc_valorimovel3': faker.pyfloat(min_value=0, max_value=1000000, right_digits=2),
            'pfc_marcaveiculo1': faker.word(),
            'pfc_modeloveiculo1': faker.word(),
            'pfc_anoveiculo1': faker.random_int(min=1900, max=2024),
            'pfc_valorveiculo1': faker.pyfloat(min_value=0, max_value=500000, right_digits=2),
            'pfc_marcaveiculo2': faker.word(),
            'pfc_modeloveiculo2': faker.word(),
            'pfc_anoveiculo2': faker.random_int(min=1900, max=2024),
            'pfc_valorveiculo2': faker.pyfloat(min_value=0, max_value=500000, right_digits=2),
            'pfc_patrimoniototal': faker.pyfloat(min_value=0, max_value=1000000, right_digits=2),
            'pfc_credordivida': faker.word(),
            'pfc_tipodivida': faker.random_int(min=1, max=5),
            'pfc_valordivida': faker.pyfloat(min_value=0, max_value=500000, right_digits=2),
            'pfc_banco': faker.random_int(min=0, max=1000),
            'pfc_agencia': faker.random_int(min=0, max=1000),
            'pfc_contacorrente': faker.random_number(digits=8, fix_len=True),
            'pfc_cidade': faker.city(),
            'pfc_estado': faker.state_abbr(),
            'pfc_segurovida': faker.boolean(),
            'pfc_seguroauto': faker.boolean(),
            'pfc_seguroimovel': faker.boolean(),
            'pfc_americanexpress': faker.boolean(),
            'pfc_diners': faker.boolean(),
            'pfc_visa': faker.boolean(),
            'pfc_mastercard': faker.boolean(),
            'pfc_cartao5': faker.boolean(),
            'pfc_cartao6': faker.boolean(),
            'pfc_cartao7': faker.boolean(),
            'pfc_cartao8': faker.boolean(),
            'pfc_cartao9': faker.boolean(),
            'pfc_outros': faker.boolean(),
            'pfc_outrocartao': faker.word(),
            'pfc_validadecartao': faker.date_this_decade().strftime('%Y-%m-%d'),
            'pfc_numerocartao': faker.credit_card_number(),
            'pfc_grauinstrucao': faker.random_int(min=0, max=10),
            'pfc_dataadmissao': faker.date_this_decade().strftime('%Y-%m-%d'),
            'pfc_nomeagencia': faker.word(),
            'pfc_chequeespecial': faker.random_int(min=0, max=1000),
            'pfc_telefonebanco': faker.phone_number(),
            'pfc_nomeconjuge': faker.name(),
            'pfc_cpfconjuge': faker.cpf(),
            'pfc_grauinstrucaoconjuge': faker.random_int(min=0, max=10),
            'pfc_datanascimentoconjuge': faker.date_of_birth().strftime('%Y-%m-%d'),
            'pfc_numeroidentidadeconjuge': faker.bothify(text='?###########'),
            'pfc_empresaconjuge': faker.company(),
            'pfc_profissaoconjuge': faker.job(),
            'pfc_salarioconjuge': faker.pyfloat(min_value=0, max_value=100000, right_digits=2),
            'pfc_nomereferencia1': faker.name(),
            'pfc_enderecoreferencia1': faker.address(),
            'pfc_nomereferencia2': faker.name(),
            'pfc_enderecoreferencia2': faker.address(),
            'pfc_naturezaocupacao': faker.random_int(min=0, max=1000),
            'pfc_email': faker.email(),
            'pfc_veiculofinanciadoquitado': faker.random_int(min=0, max=2),
            'pfc_tempocontaanos': faker.random_int(min=0, max=50),
            'pfc_tempocontameses': faker.random_int(min=0, max=11),
            'pfc_filhosmenores14anos': faker.random_int(min=0, max=10),
            'pfc_dataadmissaoconjuge': faker.date_this_decade().strftime('%Y-%m-%d'),
            'pfc_datacompraloja': faker.date_this_decade().strftime('%Y-%m-%d'),
            'pfc_dacpf': faker.boolean(),
            'pfc_darg': faker.boolean(),
            'pfc_dacomprovanteresidencial': faker.boolean(),
            'pfc_dacomprovanterenda': faker.boolean(),
            'pfc_darendaconjuge': faker.boolean(),
            'pfc_daoutrasrendas': faker.boolean(),
            'pfc_dddcelular': faker.random_number(digits=2, fix_len=True),
            'pfc_telefonecelular': faker.phone_number(),
            'pfc_margemconsignacao': faker.pyfloat(min_value=0, max_value=100, right_digits=2),
            'pfc_matricula1': faker.word(),
            'pfc_matricula2': faker.word(),
            'pfc_ufemissaoidentidade': faker.state_abbr(),
            'pfc_numerocnh': faker.bothify(text='?###########'),
            'pfc_validadecnh': faker.date_this_decade().strftime('%Y-%m-%d'),
            'pfc_numerosegurancacnh': faker.random_number(digits=1, fix_len=True),
            'pfc_codigovalidacaocnh': faker.random_number(digits=1, fix_len=True),
            'pfc_dataemissaocnh': faker.date_this_decade().strftime('%Y-%m-%d'),
            'pfc_numerocarteiratrabalho': faker.bothify(text='?###########'),
            'pfc_seriecarteiratrabalho': faker.random_number(digits=2, fix_len=True),
            'pfc_ufcarteiratrabalho': faker.state_abbr(),
            'pfc_dataemissaocarteiratrabalho': faker.date_this_decade().strftime('%Y-%m-%d'),
            'pfc_identidadeprofissional': faker.bothify(text='?###########'),
            'pfc_tipoidentidadeprofissional': faker.word(),
            'pfc_dataemissaoidentidadeprofissional': faker.date_this_decade().strftime('%Y-%m-%d'),
            'pfc_referenciapessoal3': faker.name(),
            'pfc_visamasternacional': faker.boolean(),
            'pfc_visamasterinternacional': faker.boolean(),
            'pfc_visamastergold': faker.boolean(),
            'pfc_visamasterplatinum': faker.boolean(),
            'pfc_visamasterblack': faker.boolean(),
            'pfc_visamasterinfinity': faker.boolean(),
            'pfc_americanecredit': faker.boolean(),
            'pfc_americaneblue': faker.boolean(),
            'pfc_americanebusiness': faker.boolean(),
            'pfc_americanegold': faker.boolean(),
            'pfc_americaneplatinum': faker.boolean(),
            'pfc_americaneback': faker.boolean(),
            'pfc_centuriongreen': faker.boolean(),
            'pfc_centuriongold': faker.boolean(),
            'pfc_centurionplatinum': faker.boolean(),
            'pfc_outrosprivatelabel': faker.boolean(),
            'pfc_outrosdinnersclub': faker.boolean(),
            'pfc_vipbbestilo': faker.boolean(),
            'pfc_vipbradescoprime': faker.boolean(),
            'pfc_viphsbcpremier': faker.boolean(),
            'pfc_vipitaupersonalite': faker.boolean(),
            'pfc_vipsantandervangogh': faker.boolean(),
            'pfc_observacaolojista': faker.text(),
            'pfc_parentescopessoal1': faker.random_int(min=0, max=10),
            'pfc_parentescopessoal2': faker.random_int(min=0, max=10),
            'pfc_parentescopessoal3': faker.random_int(min=0, max=10),
            'pfc_masternacional': faker.boolean(),
            'pfc_masterinternacional': faker.boolean(),
            'pfc_mastergold': faker.boolean(),
            'pfc_masterplatinum': faker.boolean(),
            'pfc_masterblack': faker.boolean(),
            'pfc_masterinfinity': faker.boolean(),
            'pfc_numbeneficioinss': faker.bothify(text='?###########'),
            'pfc_representantelegal': faker.name(),
            'pfc_enderecoreferencia3': faker.address(),
            'pfc_id_tipodocumento': faker.random_int(min=0, max=10),
            'pfc_faturamentoanual': faker.pyfloat(min_value=0, max_value=10000000, right_digits=2),
            'pfc_nomefantasia': faker.company(),
            'pfc_ramoatividade': faker.random_int(min=0, max=1000),
            'pfc_dataconstituicaoemp': faker.date_this_decade().strftime('%Y-%m-%d'),
            'pfc_carteiranacionalsaude': faker.bothify(text='?###########'),
            'pfc_flagenviarcorrespondenciaemail': faker.boolean(),
            'pfc_inscricaoestadual': faker.bothify(text='?###########'),
            'pfc_emailsecundario': faker.email(),
            'pfc_inscricaomunicipal': faker.bothify(text='?###########'),
            'pfc_nomeresponsavelcad': faker.name(),
            'pfc_cpfresponsavelcad': faker.cpf(),
            'pfc_dtnascimentoresponsavelcad': faker.date_of_birth().strftime('%Y-%m-%d'),
            'pfc_dddresponsavelcad': faker.random_number(digits=2, fix_len=True),
            'pfc_telefoneresponsavelcad': faker.phone_number(),
            'pfc_dddcelresponsavelcad': faker.random_number(digits=2, fix_len=True),
            'pfc_celularresponsavelcad': faker.phone_number(),
            'pfc_emailresponsavelcad': faker.email(),
            'pfc_nomecontatoempresa': faker.name(),
            'pfc_dddtelefonecontatoempresa': faker.random_number(digits=2, fix_len=True),
            'pfc_telefonecontatoempresa': faker.phone_number(),
            'pfc_dddcelularcontatoempresa': faker.random_number(digits=2, fix_len=True),
            'pfc_celularcontatoempresa': faker.phone_number(),
            'pfc_emailcontatoempresa': faker.email(),
            'pfc_bancoref1': faker.random_int(min=0, max=1000),
            'pfc_agenciaref1': faker.random_int(min=0, max=1000),
            'pfc_ccorrenteref1': faker.random_number(digits=8, fix_len=True),
            'pfc_gerenteref1': faker.name(),
            'pfc_dddref1': faker.random_number(digits=2, fix_len=True),
            'pfc_telefoneref1': faker.phone_number(),
            'pfc_razaosocialrefcomercial1': faker.company(),
            'pfc_nomecontratorefcomercial1': faker.name(),
            'pfc_dddrefcomercial1': faker.random_number(digits=2, fix_len=True),
            'pfc_telefonerefcomercial1': faker.phone_number(),
            'pfc_emailrefcomercial1': faker.email(),
            'pfc_bancoref2': faker.random_int(min=0, max=1000),
            'pfc_agenciaref2': faker.random_int(min=0, max=1000),
            'pfc_ccorrenteref2': faker.random_number(digits=8, fix_len=True),
            'pfc_gerenteref2': faker.name(),
            'pfc_dddref2': faker.random_number(digits=2, fix_len=True),
            'pfc_telefoneref2': faker.phone_number(),
            'pfc_razaosocialrefcomercial2': faker.company(),
            'pfc_nomecontratorefcomercial2': faker.name(),
            'pfc_dddrefcomercial2': faker.random_number(digits=2, fix_len=True),
            'pfc_telefonerefcomercial2': faker.phone_number(),
            'pfc_emailrefcomercial2': faker.email(),
            'pfc_insencaoinscricaoestadual': faker.boolean(),
            'pfc_codigoprofissao': faker.random_int(min=0, max=1000),
            'pfc_codigocargo': faker.random_int(min=0, max=1000),
            'pfc_impedidodefinanciamento': faker.boolean(),
            'pfc_pessoapoliticamenteexposta': faker.boolean(),
            'pfc_cnae': faker.word(),
            'pfc_formaconstituicao': faker.word(),
            'pfc_flagnomepainaoinformado': faker.boolean(),
            'pfc_flagsemenderecocomercialfixo': faker.boolean(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S%z'),
            'operation': random.choice(['INSERT', 'A_UPDATE']),
            'operation_sequence': faker.random_int(min=1, max=1000),
            'production_date': faker.date_this_year().strftime('%Y-%m-%d')
        }
        data['cliente_complemento'].append(criar_cliente_complemento)

        criar_conta = {
            'hash_key': str(faker.uuid4()),
            'source': faker.date_time().strftime('%Y%m%d%H%M%S'),
            'ct_id_conta': faker.random_int(min=10000000, max=99999999),
            'ct_id_emissor': faker.random_int(min=1, max=10),
            'ct_id_filial': faker.random_int(min=0, max=100),
            'ct_id_produto': faker.random_int(min=1, max=100),
            'ct_bin': faker.random_int(min=100000, max=999999),
            'ct_conta': faker.random_int(min=1000, max=99999999),
            'ct_tipopessoa': faker.random_int(min=1, max=2),
            'ct_id_pessoa': faker.random_int(min=1000000, max=99999999),
            'ct_quantidadevencimentos': faker.random_int(min=1, max=12),
            'ct_vencimento1': faker.random_int(min=1, max=31),
            'ct_vencimento2': faker.random_int(min=0, max=31),
            'ct_vencimento3': faker.random_int(min=0, max=31),
            'ct_proximovencimentoreal': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_proximovencimentopadrao': faker.date_object().strftime('%d/%m/%Y'),
            'ct_datacadastramento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_aniversarioanuidade1': faker.random_int(min=0, max=365),
            'ct_aniversarioanuidade2': faker.random_int(min=0, max=365),
            'ct_quantidadeportadores': faker.random_int(min=1, max=10),
            'ct_id_caracteristicaanuidade': faker.random_int(min=1, max=10),
            'ct_status': faker.random_int(min=0, max=999),
            'ct_flagutilizacao': faker.boolean(),
            'ct_id_origemcomercial': faker.random_int(min=1, max=100),
            'ct_flagdescontoparticular': faker.boolean(),
            'ct_statusextrato': faker.boolean(),
            'ct_posicaocobranca': faker.random_int(min=0, max=10),
            'ct_correspondencia': faker.random_int(min=1, max=2),
            'ct_statusdata': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_datavencimentocobranca': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_dataultimopagamento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_dataultimopagamentoatraso': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_datapagamentomaioratraso': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_tamanhoultimoatraso': faker.random_int(min=0, max=100),
            'ct_tamanhomaioratraso': faker.random_int(min=0, max=100),
            'ct_atrasototal': faker.random_int(min=0, max=1000),
            'ct_quantidadepagamentos': faker.random_int(min=0, max=100),
            'ct_quantidadeatrasos': faker.random_int(min=0, max=100),
            'ct_datapgtoinformado': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_banco': faker.random_int(min=0, max=1000),
            'ct_agencia': faker.random_int(min=0, max=1000),
            'ct_datavisitaagendada': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_datapgtoprometido': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_finalconta': faker.random_int(min=0, max=9),
            'ct_assessoriastatus': faker.random_int(min=0, max=10),
            'ct_assessoriaatual': faker.random_int(min=0, max=10),
            'ct_rendacomprovada': faker.pyfloat(min_value=0, max_value=100000),
            'ct_numeroacc': faker.pyfloat(min_value=0, max_value=100000),
            'ct_flagrescaldo': faker.random_int(min=0, max=1),
            'ct_obscli': faker.text(),
            'ct_id_acaocobranca': faker.random_int(min=0, max=100),
            'ct_dataagendamento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_horaagendamento': faker.time(),
            'ct_datavalidadeacao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_flagnegativado': faker.random_int(min=0, max=1),
            'ct_dataenviocartafollow': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_dataultimoenvio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_dataprimeiroenvio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_flagacaoadm': faker.random_int(min=0, max=1),
            'ct_id_acordo': faker.random_int(min=0, max=1000000),
            'ct_datavencimentoativacao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_dataultimaativacao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_dataultimaalteracaovencto': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_dataultimoatraso': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_id_proposta': faker.random_int(min=10000000, max=99999999),
            'ct_datasaidaassessoria': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_id_acionamento': faker.random_int(min=0, max=1000000),
            'ct_id_containdicacao': faker.random_int(min=0, max=10000000),
            'ct_behaviorscore': faker.random_int(min=0, max=1000),
            'ct_possuioverlimit': faker.boolean(),
            'ct_id_telefonesms': faker.random_int(min=0, max=1000000),
            'ct_id_contamigracao': faker.random_int(min=10000000, max=99999999),
            'ct_numerofidelidade': faker.bothify(text='########???????'),
            'ct_id_tipocliente': faker.random_int(min=1, max=10),
            'ct_anoquitacao': faker.random_int(min=2000, max=2025),
            'ct_proximovencpadrao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ct_funcaoativa': faker.random_int(min=0, max=1),
            'ct_idconta_emissor': faker.random_int(min=0, max=1000000),
            'sct_status': faker.random_int(min=0, max=999),
            'sct_descricao': faker.text(),
            'sct_flagnegativsaldo': faker.boolean(),
            'sct_flagalteradatacobranca': faker.boolean(),
            'sct_flagmantemstatus': faker.boolean(),
            'sct_respautorizador': faker.bothify(text='??'),
            'sct_portadorcupomsaldo': faker.word(),
            'sct_flagencargosmulta': faker.boolean(),
            'sct_flagemiteextrato': faker.random_int(min=0, max=1),
            'sct_statuscongelado': faker.random_int(min=0, max=999),
            'sct_statusdescongelado': faker.random_int(min=0, max=999),
            'sct_flagapropriajuros': faker.boolean(),
            'sct_flagajustaencargosvencimento': faker.boolean(),
            'sct_flagajustedebitovencimento': faker.boolean(),
            'sct_flagdebitosfaturadosprox': faker.boolean(),
            'sct_flagemitecartao': faker.boolean(),
            'sct_statusgeraembossing': faker.boolean(),
            'sct_flagencargos': faker.boolean(),
            'sct_flagmulta': faker.boolean(),
            'sct_statusgeranegativacao': faker.boolean(),
            'sct_flagmovimentocontascredoras': faker.random_int(min=0, max=1),
            'sct_flagalteralimitelote': faker.boolean(),
            'sct_flagcancelacartao': faker.boolean(),
            'sct_flagperda': faker.boolean(),
            'sct_flagaceitanovacontagrupoproduto': faker.random_int(min=0, max=1),
            'sct_flagpermiteautorizacaovialistagem': faker.random_int(min=0, max=1),
            'sct_flagpermiteacordo': faker.random_int(min=0, max=1),
            'sct_cupomsaldodiasatrasobloqueio': faker.word(),
            'sct_flagalteralimite': faker.boolean(),
            'sct_flagpermitealteracaovencto': faker.boolean(),
            'sct_flagcancelamento': faker.boolean(),
            'sct_flagnaopermiteacordo': faker.boolean(),
            'sct_flagnormalizaconta': faker.random_int(min=0, max=1),
            'sct_flagcadastrosenha': faker.random_int(min=0, max=1),
            'sct_flagapropriacreditobeneficio': faker.random_int(min=0, max=1),
            'sct_flagdestacastatusatdo': faker.random_int(min=0, max=1),
            'sct_flagentracreliq': faker.boolean(),
            'sct_flagofereceseguroatdo': faker.random_element(elements=('0', '1')),
            'sct_flagcancelaconta': faker.random_int(min=0, max=1),
            'sct_flagdemissao': faker.random_int(min=0, max=1),
            'sct_flagtratamentoacordo': faker.random_int(min=0, max=1),
            'sct_statusacordo': faker.random_int(min=0, max=999),
            'sct_flagiofrotativo': faker.boolean(),
            'sct_flagantecipadivida': faker.boolean(),
            'sct_flagrefinanciadivida': faker.boolean(),
            'sct_flaglimitessegmentados': faker.random_int(min=0, max=1),
            'sct_flagcompraestocada': faker.boolean(),
            'sct_flagreversivel': faker.boolean(),
            'sct_flagstatusfraude': faker.boolean(),
            'sct_flagliberacreditoconvenio': faker.random_int(min=0, max=1),
            'sct_flagconsignar': faker.boolean(),
            'sct_flagenviarpreviaconsignado': faker.boolean(),
            'sct_flagfaztransferencia': faker.boolean(),
            'sct_flagrecebetransferencia': faker.boolean(),
            'sct_flaggeratarifa': faker.boolean(),
            'sct_flagreemiteautcartao': faker.boolean(),
            'sct_prioridade': faker.random_int(min=0, max=10),
            'sct_flagpermitebloqueio': faker.random_int(min=0, max=1),
            'sct_flagpermitedesbloqueio': faker.random_int(min=0, max=1),
            'oc_id_origemcomercial': faker.random_int(min=1, max=1000),
            'oc_id_emissor': faker.random_int(min=1, max=10),
            'oc_nome': faker.company(),
            'oc_descricao': faker.text(),
            'oc_id_promotorvenda': faker.random_int(min=1000000, max=9999999),
            'oc_flagpreaprovado': faker.boolean(),
            'oc_flagaprovacaoimediata': faker.boolean(),
            'oc_nomefantasiaplastico': faker.company(),
            'oc_id_estabelecimento': faker.random_int(min=1, max=1000),
            'oc_flagsituacaoorigem': faker.boolean(),
            'oc_flagcartaoprovisorio': faker.boolean(),
            'oc_flagcartaodefinitivo': faker.boolean(),
            'oc_usuario': faker.user_name(),
            'oc_senha': faker.password(),
            'oc_origemexterna': faker.boolean(),
            'oc_flagmodificado': faker.boolean(),
            'oc_id_tipoorigem': faker.random_int(min=1, max=10),
            'oc_tipopessoa': faker.random_int(min=1, max=2),
            'oc_responsavel': faker.name(),
            'oc_flagenviafaturausuario': faker.random_int(min=0, max=1),
            'oc_flagcreditofaturamento': faker.random_int(min=0, max=1),
            'oc_flagconcedelimiteprovisorio': faker.boolean(),
            'oc_id_grupoorigemcomercial': faker.random_int(min=1, max=100),
            'oc_flagdigitalizardoc': faker.boolean(),
            'oc_flagembossingloja': faker.boolean(),
            'oc_flagconsultaprevia': faker.boolean(),
            'oc_flagembossacartaodefinitivo': faker.boolean(),
            'oc_flagenviasms': faker.boolean(),
            'tos_id_tipoorigem': faker.random_int(min=1, max=10),
            'tos_descricao': faker.text(),
            'tos_flagrelatoriotad': faker.boolean(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=('A_UPDATE', 'INSERT')),
            'operation_sequence': faker.random_int(min=1, max=100000),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['conta'].append(criar_conta)

        criar_controle_vencimento = {
            'hash_key': str(faker.uuid4()),
            'source': faker.date_time().strftime('%Y%m%d%H%M%S'),
            'cv_id_controlevencimentos': faker.random_number(digits=10, fix_len=True),
            'cv_datavencimento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'cv_dataprevistacorte': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'cv_datarealizacaocorte': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'cv_dataprevistafaturamento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'cv_datarealizacaofaturamento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'cv_dataprevistavencimento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'cv_datarealizacaovencimento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'cv_usuario': faker.user_name(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=('A_UPDATE', 'INSERT')),
            'operation_sequence': faker.random_int(min=1, max=100000),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['controle_vencimento'].append(criar_controle_vencimento)

        criar_dado_bancario_conta = {
            'hash_key': str(faker.uuid4()),
            'source': faker.date_time().strftime('%Y%m%d%H%M%S'),
            'db_id_conta': faker.random_number(digits=10, fix_len=True),
            'db_banco': faker.random_int(min=100, max=999),
            'db_agencia': faker.random_int(min=1, max=9999),
            'db_contacorrente': faker.bothify(text='########'),
            'db_dvagencia': faker.random_int(min=0, max=9),
            'db_dvcontacorrente': faker.random_int(min=0, max=9),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=('A_UPDATE', 'INSERT')),
            'operation_sequence': faker.random_int(min=1, max=100000),
            'db_id_tipocontabancaria': faker.random_int(min=1, max=10),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['dado_bancario_conta'].append(criar_dado_bancario_conta)

        criar_estabelecimento = {
            'hash_key': str(faker.uuid4()),
            'source': faker.date_time().strftime('%Y%m%d%H%M%S'),
            'es_id_estabelecimento': faker.random_number(digits=10, fix_len=True),
            'es_nome': faker.company(),
            'es_descricao': faker.text(),
            'es_id_tipoestabelecimento': faker.random_int(min=1, max=10),
            'es_flagautomacao': faker.random_int(min=0, max=1),
            'es_quantidadepos': faker.random_int(min=1, max=100),
            'es_id_credor': faker.random_int(min=1, max=1000),
            'es_cgc': faker.cnpj(),
            'es_numeroestabelecimento': faker.random_int(min=1, max=999999),
            'es_dvnumeroestabelecimento': faker.random_digit(),
            'es_contato': faker.name(),
            'es_cargocontato': faker.job(),
            'es_email': faker.email(),
            'es_matrizfilial': faker.random_int(min=0, max=1),
            'es_tipopagamento': faker.random_int(min=1, max=10),
            'es_banco': faker.random_int(min=100, max=999),
            'es_agencia': faker.random_int(min=1, max=9999),
            'es_contacorrente': faker.bothify(text='########'),
            'es_dvcontacorrente': faker.random_digit(),
            'es_nomefantasia': faker.company(),
            'es_aberturaempresa': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d'),
            'es_dataconsulta1': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'es_identidade1': faker.random_int(min=1, max=999999),
            'es_status1': faker.random_int(min=0, max=10),
            'es_dataconsulta2': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'es_identidade2': faker.random_int(min=1, max=999999),
            'es_status2': faker.random_int(min=0, max=10),
            'es_dataconsulta3': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'es_identidade3': faker.random_int(min=1, max=999999),
            'es_status3': faker.random_int(min=0, max=10),
            'es_datacadastramento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'es_obs': faker.text(),
            'es_terminal': faker.bothify(text='??-####'),
            'es_mensagem': faker.text(),
            'es_cartaodigitado': faker.boolean(),
            'es_dvagencia': faker.random_digit(),
            'es_inativo': faker.boolean(),
            'es_flagarquivosecrfazenda': faker.boolean(),
            'es_associadospcbrasil': faker.random_int(min=0, max=1),
            'es_tipoconta': faker.random_int(min=1, max=10),
            'es_id_tipoendereco': faker.random_int(min=1, max=10),
            'es_tipologradouro': faker.street_suffix(),
            'es_nomelogradouro': faker.street_name(),
            'es_numeroendereco': faker.building_number(),
            'es_complementoendereco': generate_secondary_address(),
            'es_bairro': faker.street_address(),
            'es_cep': faker.postcode(),
            'es_uf': faker.state_abbr(),
            'es_pais': faker.country(),
            'es_datainclusao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'es_id_municipio': faker.random_int(min=1, max=1000),
            'es_cidade': faker.city(),
            'es_nomelogradouro2': faker.street_name(),
            'es_numeroendereco2': faker.building_number(),
            'es_complementoendereco2': generate_secondary_address(),
            'es_id_municipio2': faker.random_int(min=1, max=1000),
            'es_cidade2': faker.city(),
            'es_bairro2': faker.street_address(),
            'es_cep2': faker.postcode(),
            'es_uf2': faker.state_abbr(),
            'es_correspondencia': faker.random_int(min=0, max=1),
            'es_id_emissor': faker.random_int(min=1, max=10),
            'es_obsdescred': faker.text(),
            'es_flagdescred': faker.boolean(),
            'es_usuario': faker.user_name(),
            'es_id_bandeira': faker.random_int(min=1, max=10),
            'es_codigomcc': faker.random_int(min=1000, max=9999),
            'es_id_grupomcc': faker.random_int(min=1, max=100),
            'es_id_moeda': faker.random_int(min=1, max=10),
            'es_mcc': faker.random_int(min=1000, max=9999),
            'es_id_pais': faker.random_int(min=1, max=1000),
            'es_usuarioapl': faker.user_name(),
            'tes_id_tipoestabelecimento': faker.random_int(min=1, max=10),
            'tes_tipoestabelecimento': faker.text(),
            'tes_ticketmedio': faker.pyfloat(min_value=0, max_value=10000),
            'tes_percentual': faker.pyfloat(min_value=0, max_value=100),
            'mo_codigomoeda': faker.bothify(text='???'),
            'mo_descricao': faker.text(),
            'mo_simbolo': faker.currency_symbol(),
            'mo_id_moeda': faker.random_int(min=1, max=10),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=('A_UPDATE', 'INSERT')),
            'operation_sequence': faker.random_int(min=1, max=100000),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['estabelecimento'].append(criar_estabelecimento)

        criar_estabelecimento_externo = {
            'hash_key': str(faker.uuid4()),
            'source': faker.date_time().strftime('%Y%m%d%H%M%S'),
            'ee_id_estabelecimento_visa': faker.random_number(digits=10, fix_len=True),
            'ee_nome_estabelecimento_visa': faker.company(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=('A_UPDATE', 'INSERT')),
            'operation_sequence': faker.random_int(min=1, max=100000),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['estabelecimento_externo'].append(criar_estabelecimento_externo)

        criar_estado_conta = {
            'hash_key': str(faker.uuid4()),
            'source': faker.date_time_between(start_date='-1y', end_date='now').strftime('%Y%m%d%H%M%S'),
            'ec_id_conta': random.randint(10000000, 99999999),
            'ec_id_emissor': random.randint(1,10),
            'ec_id_produto': random.randint(1,10),
            'ec_proximovencimentoreal': faker.date_time_between(start_date='+1m', end_date='+2m').isoformat(),
            'ec_proximovencimentopadrao': faker.date_this_year(before_today=False, after_today=True).strftime('%d/%m/%Y'),
            'ec_inicioperiodofaturado': faker.date_time_between(start_date='-1m', end_date='now').isoformat(),
            'ec_terminoperiodofaturado': faker.date_time_between(start_date='-1m', end_date='now').isoformat(),
            'ec_saldoextratoanterior': random.uniform(-1000, 10000),
            'ec_basemultacobrada': random.uniform(0, 100),
            'ec_valorminimoextrato': random.uniform(-1000, 1000),
            'ec_numerociclo': random.randint(1, 100),
            'ec_financiavelextrato': random.uniform(0, 100000),
            'ec_naofinanciavelextrato': random.uniform(0, 10000),
            'ec_dataprevistafinanciamento': faker.date_this_year(before_today=False, after_today=True).isoformat(),
            'ec_vencimentorealanterior': faker.date_time_between(start_date='-1m', end_date='now').isoformat(),
            'ec_vencimentopadraoanterior': faker.date_this_year(before_today=True).strftime('%d/%m/%Y'),
            'ec_dataregularizacaofinanciamento': faker.date_this_year(before_today=False, after_today=True).isoformat(),
            'ec_multaextrato': random.uniform(0, 100),
            'ec_internacionaisdolarextrato': random.uniform(0, 1000),
            'ec_internacionaisreaisextrato': random.uniform(0, 10000),
            'ec_debitosinternacionais': random.uniform(0, 1000),
            'ec_comprasinternacionaisdolar': random.uniform(0, 1000),
            'ec_saquesinternacionaisdolar': random.uniform(0, 1000),
            'ec_diversosinternacionaisdolar': random.uniform(0, 1000),
            'ec_despesasinternacionaisdolar': random.uniform(0, 1000),
            'ec_despesasinternacionaisreais': random.uniform(0, 10000),
            'ec_parcelasfinanciaveis': random.uniform(0, 10000),
            'ec_comprasnacionais': random.uniform(0, 100000),
            'ec_saquesnacionais': random.uniform(0, 100000),
            'ec_tarifasnacionais': random.uniform(0, 1000),
            'ec_debitosdiversosnacionais': random.uniform(0, 1000),
            'ec_multa': random.uniform(0, 100),
            'ec_encargosfinanciamento': random.uniform(0, 1000),
            'ec_encargosatraso': random.uniform(0, 1000),
            'ec_acertospositivosdiversos': random.uniform(0, 10000),
            'ec_creditosnacionais': random.uniform(0, 10000),
            'ec_debitosnacionais': random.uniform(0, 10000),
            'ec_pagamentos': random.uniform(0, 10000),
            'ec_creditopagamentominimo': random.uniform(0, 1000),
            'ec_correcaocreditominimo': random.uniform(0, 1000),
            'ec_acertosnegativosdiversos': random.uniform(0, 1000),
            'ec_saldoanteriorfinal': random.uniform(-1000, 10000),
            'ec_financiavelanteriorfinal': random.uniform(0, 100000),
            'ec_datafinanciavelfinal': faker.date_this_year().isoformat(),
            'ec_financiadoanteriorfinal': random.uniform(0, 10000),
            'ec_datafinanciadofinal': faker.date_this_year().isoformat(),
            'ec_naofinanciavelanteriorfinal': random.uniform(0, 10000),
            'ec_datanaofinanciavelfinal': faker.date_this_year().isoformat(),
            'ec_saldoatualfinal': random.uniform(-1000, 10000),
            'ec_financiavelatualfinal': random.uniform(0, 100000),
            'ec_naofinanciavelatualfinal': random.uniform(0, 10000),
            'ec_flagmulta': faker.boolean(),
            'ec_flagrefinanciamento': faker.boolean(),
            'ec_flaganuidade': faker.boolean(),
            'ec_flagemiteextrato': faker.boolean(),
            'ec_flagcobrafinanciamento': random.randint(0,1),
            'ec_flagcobramulta': random.randint(0,1),
            'ec_saldoextratoanteriorajustado': random.uniform(-1000, 10000),
            'ec_statusconta': random.randint(0, 1000),
            'ec_flagalteracaovencimento': random.randint(0,1),
            'ec_valorminimoextratooriginal': random.uniform(-1000, 1000),
            'ec_parcelasnaofinanciaveis': random.uniform(0, 10000),
            'ec_valorminimoextratoanterior': random.uniform(-1000, 1000),
            'ec_valorjamultado': random.uniform(0, 100),
            'ec_comprajuros': random.uniform(0, 1000),
            'ec_pontosconcedidos': random.uniform(0, 1000),
            'ec_pontosremanescentes': random.uniform(0, 1000),
            'ec_vencimentobasejurospadrao': faker.date_this_year().strftime('%d/%m/%Y'),
            'ec_vencimentobasejurosreal': faker.date_this_year().isoformat(),
            'ec_rotativopagajuros': random.uniform(-1000, 1000),
            'ec_saquepagajuros': random.uniform(0, 1000),
            'ec_comprasjurospagajuros': random.uniform(0, 1000),
            'ec_vencimentoprox': faker.date_this_year(before_today=False, after_today=True).isoformat(),
            'ec_saquefaturadoprox': random.uniform(0, 1000),
            'ec_comprasjurosfaturadoprox': random.uniform(0, 1000),
            'ec_debitosfaturadosprox': random.uniform(0, 10000),
            'ec_totalprox': random.uniform(0, 10000),
            'ec_vencimentoposprox': faker.date_this_year(before_today=False, after_today=True).isoformat(),
            'ec_totalposprox': random.uniform(0, 10000),
            'ec_totalfuturo': random.uniform(0, 10000),
            'ec_flagemfaturamento': random.randint(0,1),
            'ec_proximovalorminimo': random.uniform(0, 1000),
            'ec_statuscontabil': random.randint(0,10),
            'ec_pontuacaototalciclo': random.uniform(0, 1000),
            'ec_pontuacaousadaciclo': random.uniform(0, 1000),
            'ec_jurosmora': random.uniform(0, 100),
            'ec_saldocongelado': random.uniform(0, 1000),
            'ec_principalparcelado': random.uniform(0, 10000),
            'ec_comprassemjurosnaovencidas': random.uniform(0, 10000),
            'ec_parcelascomjurosnaovencidas': random.uniform(0, 10000),
            'ec_saldofuturojuros': random.uniform(0, 10000),
            'ec_saldofuturoparceladocomjuros': random.uniform(0, 10000),
            'ec_saldofuturoparceladosemjuros': random.uniform(0, 10000),
            'ec_encargosciclo': random.uniform(0, 1000),
            'ec_taxadiariaciclo': random.uniform(0, 0.1),
            'ec_id_saldodiario': random.randint(-2000000000, 2000000000),
            'ec_dataentradacreliq': faker.date_this_year().isoformat(),
            'ec_saldoentradacreliq': random.uniform(0, 10000),
            'ec_saldojurosacordo': random.uniform(0, 10000),
            'ec_databaserendimento': faker.date_this_year().isoformat(),
            'ec_dataultaplicacao': faker.date_this_year().isoformat(),
            'ec_saldoaplicacao': random.uniform(0, 10000),
            'ec_rendimentoacumulado': random.uniform(0, 1000),
            'ec_provisaoirdatabase': random.uniform(0, 1000),
            'ec_flagoverlimit': faker.boolean(),
            'ec_qtdeisencaotarifa': random.randint(0, 10),
            'ec_flagfaturaporemail': faker.boolean(),
            'ec_flagsmsextratoincondicional': random.randint(0, 1000),
            'ec_saldocompraprogramada': random.uniform(0, 1000),
            'ec_debitosopcionais': random.uniform(0, 1000),
            'ec_debitosrecorrentes': random.uniform(0, 1000),
            'ec_seguros': random.uniform(0, 1000),
            'ec_nossonumero': faker.bothify(text='??########'),
            'ec_vencpadraoanterior': faker.date_this_year(before_today=True).isoformat(),
            'ec_vencbasejurospadrao': faker.date_this_year().isoformat(),
            'ec_proximovencpadrao': faker.date_this_year(before_today=False, after_today=True).isoformat(),
            'ec_statusbonussabado': random.randint(0,1),
            'ec_flagdiferenciado': faker.boolean(),
            'sd_datasaldo': faker.date_this_year().isoformat(),
            'dh_relatorio': faker.date_time().isoformat(),
            'operation': random.choice(['A_UPDATE', 'INSERT']),
            'operation_sequence': random.randint(1, 100000),
            'production_date': faker.date_this_year().strftime('%Y-%m-%d')

        }
        data['estado_conta'].append(criar_estado_conta)

        criar_evento_externo_ajuste = {
            'hash_key': str(faker.uuid4()),
            'source': faker.date_time_between(start_date='-1y', end_date='now').strftime('%Y%m%d%H%M%S'),
            'ea_id_eventoajuste': faker.random_number(digits=10, fix_len=True),
            'ea_id_movimentoajuste': random.randint(0,1000),
            'ea_id_tipoajuste': random.randint(1,10),
            'ea_datainclusao': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'ea_dataorigem': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'ea_datamovimento': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'ea_id_conta': random.randint(10000000, 99999999),
            'ea_valor': random.uniform(0,10000),
            'ea_sequencialcartao': random.randint(1,1000),
            'ea_datavencimentopadrao': faker.date_this_year(before_today=False, after_today=True).strftime('%d/%m/%Y'),
            'ea_datavencimentoreal': faker.date_time_between(start_date='+1m', end_date='+2m').isoformat(),
            'ea_id_estabelecimento': random.randint(0,1000),
            'ea_id_transacaooriginal': faker.random_number(digits=10, fix_len=True),
            'ea_status': random.randint(0,10),
            'ea_responsavelinclusao': faker.word(),
            'ea_dataprocessamentolojista': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'ea_id_borderaux': random.randint(1000000, 9999999),
            'ea_dataprocessamentolojista2': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'ea_id_eventoexternooriginal': faker.random_number(digits=10, fix_len=True),
            'ea_tipoeventoexternooriginal': random.choice(['COMPRA', 'ESTORNO', 'AJUSTE']),
            'ea_statuslojista': random.randint(0,10),
            'ea_id_estabelecimento_visa': random.randint(0,1000),
            'ea_valordestino': random.uniform(0,10000),
            'ea_id_incoming': faker.random_number(digits=10, fix_len=True),
            'ea_parcelapedidaincoming': random.randint(1,10),
            'ea_origemresolucao': faker.word(),
            'ea_datavencpadrao': faker.date_this_year(before_today=False, after_today=True).isoformat(),
            'ea_datadebitoconta': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'ea_descricaoestabelecimentoexterno': faker.sentence(),
            'dh_relatorio': faker.date_time().isoformat(),
            'operation': random.choice(['A_UPDATE', 'INSERT']),
            'operation_sequence': random.randint(1, 100000),
            'production_date': faker.date_this_year().strftime('%Y-%m-%d')
        }
        data['evento_externo_ajuste'].append(criar_evento_externo_ajuste)

        criar_evento_externo_compra_nao_processado = {
            'hash_key': str(faker.uuid4()),
            'source': faker.date_time_between(start_date='-1y', end_date='now').strftime('%Y%m%d%H%M%S'),
            'een_id_eventocompra': faker.random_number(digits=10, fix_len=True),
            'een_id_origem': random.randint(0, 1000),
            'een_id_movimento': random.randint(0, 1000),
            'een_id_remessa': random.randint(0, 1000),
            'een_dataremessa': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_lote': random.randint(1,1000),
            'een_numeroestabelecimento': random.randint(1000000, 9999999),
            'een_dvnumeroestabelecimento': random.randint(0,9),
            'een_descricao': faker.sentence(),
            'een_cartao': faker.credit_card_number(),
            'een_datacompra': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_codigoautorizacao': faker.bothify(text='########'),
            'een_id_operacao': random.randint(1,10),
            'een_valorcompra': random.uniform(0, 10000),
            'een_numeroparcelas': random.randint(1,10),
            'een_valorparcela': random.uniform(0, 1000),
            'een_quantidademoeda': random.uniform(0,100),
            'een_fatortotalajustado': random.uniform(0,100),
            'een_fatorbancoajustado': random.uniform(0,100),
            'een_fatortaxaadministracao': random.uniform(0,100),
            'een_fatorcomissaogarantia': random.uniform(0,100),
            'een_fatortotal': random.uniform(0,100),
            'een_id_estabelecimento': random.randint(1,1000),
            'een_datapagamentolojista': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_datafinanciamento': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_datamovimento': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_datavencimentocomprainicial': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_datavencimentocomprafinal': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_flagselecionado': random.randint(0,1),
            'een_flagrefinanciamento': random.randint(0,1),
            'een_tipocompra': random.randint(1,10),
            'een_tipopagamento': random.randint(1,10),
            'een_tipocalculoprestacao': random.randint(1,10),
            'een_tipoliquidacao': random.randint(1,10),
            'een_id_credor': random.randint(1,1000),
            'een_valorcomissao': random.uniform(0,1000),
            'een_valorliquido': random.uniform(0,10000),
            'een_valorcontrato': random.uniform(0,10000),
            'een_valorencargostotais': random.uniform(0,1000),
            'een_valorencargosbancarios': random.uniform(0,1000),
            'een_valorgarantias': random.uniform(0,1000),
            'een_valoragenciamento': random.uniform(0,1000),
            'een_tipoentrada': faker.word(),
            'een_taxajuros': random.uniform(0,100),
            'een_valoriof': random.uniform(0,1000),
            'een_valortac': random.uniform(0,1000),
            'een_id_autorizacao': faker.random_number(digits=10, fix_len=True),
            'een_id_conta': random.randint(10000000, 99999999),
            'een_dataentradacompra': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_primeiraparcela': random.uniform(0, 1000),
            'een_origem': faker.word(),
            'een_origemresolucao': faker.word(),
            'een_status': random.randint(0,10),
            'een_datavencimentoreal': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_datavencimentopadrao': faker.date_this_year().strftime('%d/%m/%Y'),
            'een_dataprocessamentolojista': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_carencia': random.randint(0,10),
            'een_id_contaportador': random.randint(0,1000),
            'een_numerocontrato': faker.bothify(text='??########'),
            'een_id_borderaux': random.randint(1000000, 9999999),
            'een_dataprocessamentolojista2': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_valorcomissao2': random.uniform(0,1000),
            'een_statuslojista': random.randint(0,10),
            'een_id_eventocompraorigem': faker.random_number(digits=10, fix_len=True),
            'een_codigomoeda': random.randint(100,1000),
            'een_mcc': random.randint(1000,9999),
            'een_codigoacquiring': random.randint(1000000,9999999),
            'een_id_incoming': faker.random_number(digits=10, fix_len=True),
            'een_identificacaotransacao': faker.bothify(text='??########'),
            'een_id_estabelecimento_visa': random.randint(1,1000),
            'een_nome_estabelecimento_visa': faker.company(),
            'een_cicloconciliacao': random.randint(0,100),
            'een_codigomoedadestino': str(random.randint(100,1000)),
            'een_valordestino': random.uniform(0,10000),
            'een_valororigem': random.uniform(0,10000),
            'een_valortaxasaque': random.uniform(0,100),
            'een_id_eventoexternoredecompartilhada': faker.random_number(digits=10, fix_len=True),
            'een_id_emissorredecompartilhada': random.randint(1,10),
            'een_id_estabelecimento_externo': random.randint(1,1000),
            'een_id_cartao': faker.random_number(digits=10, fix_len=True),
            'een_pdv': faker.word(),
            'een_databaixa': faker.date_time_between(start_date='-1y', end_date='now').isoformat(),
            'een_acquirereferencenumber': faker.bothify(text='????????????????'),
            'een_lifecicleauthorization': random.randint(0,100),
            'een_id_nivelseguranca': faker.word(),
            'een_taxaembarque': random.uniform(0,100),
            'een_valorentrada': random.uniform(0,1000),
            'een_descricaoitempedido': faker.sentence(),
            'een_id_pedido': faker.random_number(digits=10, fix_len=True),
            'een_codautredecompartilhada': faker.bothify(text='########'),
            'dh_relatorio': faker.date_time().isoformat(),
            'operation': random.choice(['INSERT', 'A_UPDATE']),
            'operation_sequence': random.randint(1, 100000),
            'production_date': faker.date_this_year().strftime('%Y-%m-%d'),
            'een_transactionuuid': str(faker.uuid4()),
            'een_cotacao': random.uniform(5, 6)
        }
        data['evento_externo_compra_nao_processado'].append(criar_evento_externo_compra_nao_processado)

        evento_externo_compra_processado = {
            'hash_key': faker.uuid4(),
            'source': faker.random_element(elements=['20240901050000', '20240901030000']),
            'ee_id_eventocompra': faker.random_int(),
            'ee_id_origem': faker.random_int(),
            'ee_id_movimento': faker.random_int(),
            'ee_id_remessa': faker.random_int(),
            'ee_dataremessa': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_lote': faker.random_int(),
            'ee_numeroestabelecimento': faker.random_int(),
            'ee_dvnumeroestabelecimento': faker.random_digit(),
            'ee_descricao': faker.sentence(),
            'ee_cartao': faker.credit_card_number(),
            'ee_datacompra': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_codigoautorizacao': faker.bothify(text='########'),
            'ee_id_operacao': faker.random_int(),
            'ee_valorcompra': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_numeroparcelas': faker.random_int(min=1, max=12),
            'ee_valorparcela': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_quantidademoeda': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_fatortotalajustado': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_fatorbancoajustado': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_fatortaxaadministracao': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_fatorcomissaogarantia': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_fatortotal': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_id_estabelecimento': faker.random_int(),
            'ee_datapagamentolojista': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_datafinanciamento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_datamovimento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_datavencimentocomprainicial': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_datavencimentocomprafinal': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_flagselecionado': faker.random_int(),
            'ee_flagrefinanciamento': faker.random_int(),
            'ee_tipocompra': faker.random_int(),
            'ee_tipopagamento': faker.random_int(),
            'ee_tipocalculoprestacao': faker.random_int(),
            'ee_tipoliquidacao': faker.random_int(),
            'ee_id_credor': faker.random_int(),
            'ee_valorcomissao': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_valorliquido': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_valorcontrato': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_valorencargostotais': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_valorencargosbancarios': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_valorgarantias': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_valoragenciamento': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_tipoentrada': faker.word(),
            'ee_taxajuros': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_valoriof': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_valortac': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_id_autorizacao': faker.random_int(),
            'ee_id_conta': faker.random_int(),
            'ee_dataentradacompra': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_primeiraparcela': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_origem': faker.random_element(elements=['MNL', 'CLE', 'MCD', 'PDV', 'ELO', '18', 'PAR', 'API', 'BII', 'ATM', 'REF']),
            'ee_origemresolucao': faker.random_element(elements=['BII', 'SCC', 'DTO', 'PAR', 'CSA', 'ECM', 'ATM']),
            'ee_status': faker.random_int(),
            'ee_datavencimentoreal': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_datavencimentopadrao': faker.date_object().strftime('%d/%m/%Y'),
            'ee_dataprocessamentolojista': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_carencia': faker.random_int(),
            'ee_id_contaportador': faker.random_int(),
            'ee_numerocontrato': faker.bothify(text='?#?####'),
            'ee_id_borderaux': faker.random_int(),
            'ee_dataprocessamentolojista2': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_valorcomissao2': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_statuslojista': faker.random_int(),
            'ee_id_eventocompraorigem': faker.random_int(),
            'ee_codigomoeda': faker.random_int(),
            'ee_mcc': faker.random_int(),
            'ee_codigoacquiring': faker.random_int(),
            'ee_valororigem': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_valortaxasaque': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_id_eventoexternoredecompartilhada': faker.random_int(),
            'ee_id_emissorredecompartilhada': faker.random_int(),
            'ee_id_estabelecimento_externo': faker.random_int(),
            'ee_id_cartao': faker.random_int(),
            'ee_pdv': faker.word(),
            'ee_databaixa': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ee_acquirereferencenumber': faker.bothify(text='????????????????????????'),
            'ee_lifecicleauthorization': faker.random_int(),
            'ee_id_nivelseguranca': faker.random_int(),
            'ee_taxaembarque': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_valorentrada': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_descricaoitempedido': faker.sentence(),
            'ee_id_pedido': faker.random_int(),
            'ee_codautredecompartilhada': faker.bothify(text='?#?####'),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=['A_UPDATE', 'INSERT']),
            'operation_sequence': faker.random_int(),
            'ee_transactionuuid': faker.uuid4(),
            'ee_flagtransacaointernet': faker.boolean(),
            'ee_flagtransacaostandin': faker.boolean(),
            'ee_codestabelecimentocomercial': faker.bothify(text='########'),
            'ee_id_adquirente': faker.random_int(),
            'ee_valorsaqueapartado': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ee_cotacao': faker.pyfloat(left_digits=1, right_digits=4, positive=True),
            'ee_flagtransacaotokenizada': faker.boolean(),
            'ee_datavencpadrao': faker.date_object().strftime('%Y-%m-%dT%H:%M:%S'),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['evento_externo_compra_processado'].append(evento_externo_compra_processado)

        evento_externo_pagamento = {
            'hash_key': faker.uuid4(),
            'source': faker.random_element(elements=['20240831220000', '20240901040000', '20240901130000']),
            'ep_id_eventopagamento': faker.random_int(),
            'ep_banco': faker.random_int(),
            'ep_datamovimento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ep_datapagamento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ep_nossonumero': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ep_arquivocobrancabancaria': faker.file_path(),
            'ep_datavencimento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ep_valorpago': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'ep_numerodocumento': faker.pyfloat(left_digits=10, right_digits=0, positive=True),
            'ep_cartao': faker.credit_card_number(),
            'ep_id_movimentopagamentopendente': faker.random_int(),
            'ep_lote': faker.random_int(),
            'ep_defasagemcobranca': faker.random_int(),
            'ep_meioliquidacao': faker.word(),
            'ep_id_estabelecimento': faker.random_int(),
            'ep_id_autorizacao': faker.random_int(),
            'ep_id_conta': faker.random_int(),
            'ep_id_operacao': faker.random_int(),
            'ep_codigoautenticacao': faker.bothify(text='??????????????'),
            'ep_dataentradapagamento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ep_datavencimentopadrao': faker.date_object().strftime('%d/%m/%Y'),
            'ep_datavencimentoreal': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ep_origem': faker.random_element(elements=['PDV', 'ELO', 'CLE']),
            'ep_origemresolucao': faker.random_element(elements=['ELO', 'PDV']),
            'ep_restituicaosaque': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'ep_status': faker.random_int(),
            'ep_dataprocessamentolojista': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ep_id_borderaux': faker.random_int(),
            'ep_dataprocessamentolojista2': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ep_codigoautorizacao': faker.bothify(text='########'),
            'ep_statuslojista': faker.random_int(),
            'ep_mcc': faker.random_int(),
            'ep_codigomoeda': faker.random_int(),
            'ep_nome_estabelecimento_visa': faker.company(),
            'ep_id_estabelecimento_visa': faker.random_int(),
            'ep_id_incoming': faker.random_int(),
            'ep_valordolar': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ep_id_cartao': faker.random_int(),
            'ep_id_eventoexternoredecompartilhada': faker.random_int(),
            'ep_id_emissorredecompartilhada': faker.random_int(),
            'ep_id_estabelecimento_externo': faker.random_int(),
            'ep_codautredecompartilhada': faker.bothify(text='?#?####'),
            'ep_databaixa': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ep_datavencpadrao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ep_flagusoudiasperdao': faker.boolean(),
            'ep_datapagamentoreal': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.random_element(elements=['INSERT', 'A_UPDATE']),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['evento_externo_pagamento'].append(evento_externo_pagamento)

        fatura = {
            'hash_key': faker.uuid4(),
            'source': faker.word(),
            'fa_id_historico': faker.random_int(),
            'fa_id_conta': faker.random_int(),
            'fa_id_emissor': faker.random_int(),
            'fa_id_produto': faker.random_int(),
            'fa_datavencimentoreal': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'fa_datavencimentopadrao': faker.date_object().strftime('%d/%m/%Y'),
            'fa_inicioperiodofaturado': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'fa_terminoperiodofaturado': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'fa_saldoextratoanterior': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_saldoextratoanteriorajustado': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_basemultacobrada': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valorminimoextrato': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_financiavelextrato': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_naofinanciavelextrato': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_multaextrato': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_numerociclo': faker.random_int(),
            'fa_internacionaisdolarextrato': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_internacionaisreaisextrato': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_debitosinternacionais': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_comprasinternacionaisdolar': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_saquesinternacionaisdolar': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_diversosinternacionaisdolar': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_despesasinternacionaisdolar': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_despesasinternacionaisreais': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_parcelasfinanciaveis': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_comprasnacionais': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_saquesnacionais': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_tarifasnacionais': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_debitosdiversosnacionais': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_multa': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_encargosfinanciamento': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_encargosatraso': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_acertospositivosdiversos': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_creditosnacionais': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_debitosnacionais': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_pagamentos': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_creditopagamentominimo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_correcaocreditominimo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_acertosnegativosdiversos': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_saldoanteriorfinal': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_financiavelanteriorfinal': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_naofinanciavelanteriorfinal': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_saldoatualfinal': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_financiavelatualfinal': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_naofinanciavelatualfinal': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_flagmulta': faker.boolean(),
            'fa_flagrefinanciamento': faker.boolean(),
            'fa_flaganuidade': faker.boolean(),
            'fa_flagemiteextrato': faker.boolean(),
            'fa_aniversarioanuidade1': faker.random_int(),
            'fa_aniversarioanuidade2': faker.random_int(),
            'fa_id_caracteristicaanuidade': faker.random_int(),
            'fa_vencimentorealanterior': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'fa_vencimentopadraoanterior': faker.date_object().strftime('%d/%m/%Y'),
            'fa_qtdevencimento': faker.random_int(),
            'fa_vencimento1': faker.random_int(),
            'fa_vencimento2': faker.random_int(),
            'fa_vencimento3': faker.random_int(),
            'fa_datahoraatualizacao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'fa_datacadastramento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'fa_quantidadeportadores': faker.random_int(),
            'fa_status': faker.random_int(),
            'fa_flagpagamento': faker.boolean(),
            'fa_numerodocumento': faker.pyfloat(left_digits=10, right_digits=0, positive=True),
            'fa_parcelasnaofinanciaveis': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_id_endereco': faker.random_int(),
            'fa_jurosmora': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_pontuacaototalciclo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_pontuacaousadaciclo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_datavencimentocobranca': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'fa_principalparcelado': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_totalfuturo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_pontosconcedidos': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_pontosremanescentes': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valorminimoextratoanterior': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cetanual': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cotacaodolar': faker.pyfloat(left_digits=1, right_digits=4, positive=True),
            'fa_saldoaplicacao': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cotacaodolarcorte': faker.pyfloat(left_digits=1, right_digits=4, positive=True),
            'fa_datafechamentoproxfatura': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'fa_limitetotalcreditoparcelado': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_limitetotalcreditoparcelaparcelado': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_limiteglobalcreditohist': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_id_sequencial_arquivo': faker.random_int(),
            'fa_encargospagminimo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_flagoverlimit': faker.boolean(),
            'fa_flagfaturaporemail': faker.boolean(),
            'fa_statusenviofaturaporemail': faker.random_int(),
            'fa_flagsmsextratoincondicional': faker.random_int(),
            'fa_debitosopcionais': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_debitosrecorrentes': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_seguros': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_datapostagem': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'fa_cetrotativoperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cetrotativoproxperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cetparceladoperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cetparceladoproxperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cetsaqueperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cetsaqueproxperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_encargosrotativoperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_encargosrotativoproxperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_encargosparceladoperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_encargosparceladoproxperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_encargossaqueperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_encargossaqueproxperiodo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valor_parcelado_futuro': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cet_cdc_mensal': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cet_cdc_anual': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cet_emprestimo_mensal': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_cet_emprestimo_anual': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valor_cet_per_rotat': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valor_cet_prox_per_rotat': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valor_cet_per_parc': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valor_cet_prox_per_parc': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valor_cet_per_saque': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valor_cet_prox_per_saque': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valor_cet_anual_rotativo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valor_cet_anual_parcelado': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_valor_cet_anual_saque': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_anoquitacao': faker.random_int(),
            'fa_datavencpadrao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'fa_vencpadraoanterior': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'fa_flagdiferenciado': faker.boolean(),
            'fa_limitemaximo': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_limiteglobalcredito': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'fa_limitesaquenacglobal': faker.pyfloat(left_digits=3, right_digits=2, positive=True),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': faker.word(),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['fatura'].append(fatura)

        criar_grade_produto = {
            'hash_key': str(faker.uuid4()),
            'source': str(faker.date_time_this_year(before_now=True).strftime('%Y%m%d%H%M%S')),
            'gp_id_gradeproduto': faker.random_int(min=1, max=10000000),
            'gp_id_conta': faker.random_int(min=1, max=100000000),
            'gp_id_produtoorigem': faker.random_int(min=1, max=10),
            'gp_id_origemcomercialorigem': faker.random_int(min=1000, max=10000),
            'gp_id_produtodestino': faker.random_int(min=1, max=10),
            'gp_id_origemcomercialdestino': faker.random_int(min=1000, max=10000),
            'gp_id_arquivo': faker.random_int(min=1, max=1000),
            'gp_datasolicitacao': faker.date_time_this_year(before_now=True).strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'gp_status': random.choice([1, 2, 3, 4, 5]),
            'gp_datamigracao': faker.date_time_this_year(before_now=True).strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'gp_limiteanterior': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'gp_limitenovo': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'gp_flagorigemws': faker.random_int(min=0, max=1),
            'gp_responsavel': faker.word(),
            'gp_flaggradeautomatico': faker.random_int(min=0, max=1),
            'oc_id_origemcomercial': faker.random_int(min=1000, max=10000),
            'oc_id_emissor': faker.random_int(min=1, max=10),
            'oc_nome': faker.company(),
            'oc_descricao': faker.paragraph(),
            'oc_id_promotorvenda': faker.random_int(min=1, max=1000),
            'oc_flagpreaprovado': faker.boolean(),
            'oc_flagaprovacaoimediata': faker.boolean(),
            'oc_nomefantasiaplastico': faker.company(),
            'oc_id_estabelecimento': faker.random_int(min=1, max=100),
            'oc_flagsituacaoorigem': faker.boolean(),
            'oc_flagcartaoprovisorio': faker.boolean(),
            'oc_flagcartaodefinitivo': faker.boolean(),
            'oc_usuario': faker.user_name(),
            'oc_senha': faker.password(),
            'oc_origemexterna': faker.boolean(),
            'oc_flagmodificado': faker.boolean(),
            'oc_id_tipoorigem': faker.random_int(min=1, max=10),
            'oc_tipopessoa': faker.random_int(min=1, max=2),
            'oc_responsavel': faker.name(),
            'oc_flagenviafaturausuario': faker.random_int(min=0, max=1),
            'oc_flagcreditofaturamento': faker.random_int(min=0, max=1),
            'oc_flagconcedelimiteprovisorio': faker.boolean(),
            'oc_id_grupoorigemcomercial': faker.random_int(min=1, max=10),
            'oc_flagdigitalizardoc': faker.boolean(),
            'oc_flagembossingloja': faker.boolean(),
            'oc_flagconsultaprevia': faker.boolean(),
            'oc_flagembossacartaodefinitivo': faker.boolean(),
            'oc_flagenviasms': faker.boolean(),
            'gc_id_grupoorigemcomercial': faker.random_int(min=1, max=10),
            'gc_descricao': faker.sentence(),
            'tg_id_tipoorigem': faker.random_int(min=1, max=10),
            'tg_descricao': faker.sentence(),
            'tg_flagrelatoriotad': faker.boolean(),
            'dh_relatorio': faker.date_time_this_year(before_now=True).strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': random.choice(['INSERT', 'A_UPDATE']),
            'operation_sequence': faker.random_int(min=1, max=10000),
            'gp_dataatualizacao': faker.date_time_this_year(before_now=True).strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'gp_dadocriacaograde': faker.text(),
            'gp_reprocessar': faker.boolean(),
            'gp_erro': faker.boolean(),
            'gp_descricaoerro': faker.text(),
            'gp_id_statuscriacaograde': faker.random_int(min=1, max=100),
            'gp_id_pessoafisica': faker.random_int(min=1, max=10000000),
            'gp_id_estabelecimento': faker.random_int(min=1, max=100),
            'gp_matricula': faker.bothify(text='#######'),
            'production_date': faker.date_this_year().strftime('%Y-%m-%d')
        }
        data['grade_produto'].append(criar_grade_produto)

        criar_integracao_grade = {
            'hash_key': str(faker.uuid4()),
            'source': str(faker.date_time_this_year(before_now=True).strftime('%Y%m%d%H%M%S')),
            'ig_id_grade': faker.random_int(min=1, max=1000000),
            'ig_id_conta': faker.random_int(min=1, max=100000000),
            'ig_idstatusintegracao': faker.random_int(min=1, max=10),
            'ig_statusintegracao': faker.word(),
            'ig_datacadastramento': faker.date_time_this_year(before_now=True).strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ig_estabelecimento': faker.word(),
            'ig_email': faker.email(),
            'ig_tipodocumento': faker.random_int(min=1, max=10),
            'ig_cpf': faker.cpf(),
            'ig_idproduto': faker.random_int(min=1, max=100),
            'ig_motivoemissaocartao': faker.sentence(),
            'ig_motivoreemissaocartao': faker.sentence(),
            'ig_statuscartaoantigo': faker.random_int(min=1, max=10),
            'ig_statuscartaonovo': faker.random_int(min=1, max=10),
            'ig_limiteinterno': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ig_limite': faker.pyfloat(left_digits=1, right_digits=2, positive=True),
            'ig_datafimvalidade': faker.date_time_this_decade(before_now=True).strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ig_portador': faker.random_int(min=1, max=10),
            'ig_cartaonovo': faker.word(),
            'ig_cartaoantigo': faker.word(),
            'ig_bloqueiocartaoantigo': faker.word(),
            'ig_chapa': faker.word(),
            'ig_chapapromotor': faker.word(),
            'ig_conta': faker.word(),
            'ig_datacriacaoconta': faker.date_time_this_year(before_now=True).strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ig_tipocobranca': faker.word(),
            'ig_codanuidade': faker.word(),
            'ig_coddesconto': faker.word(),
            'ig_codaceite': faker.word(),
            'ig_codlogonovo': faker.word(),
            'ig_dataenvio': faker.date_time_this_year(before_now=True).strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'ig_serial_tablet': faker.uuid4(),
            'ig_observacao': faker.paragraph(),
            'ig_id_cartao': faker.random_int(min=1, max=1000000),
            'dh_relatorio': faker.date_time_this_year(before_now=True).strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': random.choice(['INSERT', 'A_UPDATE']),
            'operation_sequence': faker.random_int(min=1, max=10000),
            'production_date': faker.date_this_year().strftime('%Y-%m-%d')
        }
        data['integracao_grade'].append(criar_integracao_grade)

        criar_limite_disponibilidade = {
            'hash_key': faker.uuid4(),
            'source': str(faker.random_number(digits=14, fix_len=True)),
            'ld_id_conta': faker.random_int(),
            'ld_id_emissor': faker.random_int(),
            'ld_limitesaquenacperiodo': faker.random_number(digits=5, fix_len=True),
            'ld_limitesaquenacglobal': faker.random_number(digits=5, fix_len=True),
            'ld_limitecompranac': faker.random_number(digits=5, fix_len=True),
            'ld_limiteparceladonac': faker.random_number(digits=5, fix_len=True),
            'ld_limitesaqueintperiodo': faker.random_number(digits=5, fix_len=True),
            'ld_limitesaqueintglobal': faker.random_number(digits=5, fix_len=True),
            'ld_limitecompraint': faker.random_number(digits=5, fix_len=True),
            'ld_limiteparceladoint': faker.random_number(digits=5, fix_len=True),
            'ld_limiteglobalcredito': faker.random_number(digits=5, fix_len=True),
            'ld_disponibsaquenacglobal': faker.random_number(digits=5, fix_len=True),
            'ld_disponibcompranac': faker.random_number(digits=5, fix_len=True),
            'ld_disponibparceladonac': faker.random_number(digits=5, fix_len=True),
            'ld_disponibsaqueintglobal': faker.random_number(digits=5, fix_len=True),
            'ld_disponibcompraint': faker.random_number(digits=5, fix_len=True),
            'ld_disponibparcelasnac': faker.random_number(digits=5, fix_len=True),
            'ld_disponibglobalcredito': faker.random_number(digits=5, fix_len=True),
            'ld_limiteparcelasnac': faker.random_number(digits=5, fix_len=True),
            'ld_limiteparcelasint': faker.random_number(digits=5, fix_len=True),
            'ld_limitepontuacao': faker.random_number(digits=5, fix_len=True),
            'ld_margemconsignada': faker.random_number(digits=5, fix_len=True),
            'ld_tipotarifa': faker.word(),
            'ld_percdescontotarifa': faker.random_int(),
            'ld_limitemaximo': faker.random_number(digits=5, fix_len=True),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': random.choice(['INSERT', 'A_UPDATE']),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['limite_disponibilidade'].append(criar_limite_disponibilidade)

        criar_limite_portador = {
            'hash_key': faker.uuid4(),
            'source': str(faker.random_number(digits=14, fix_len=True)),
            'lp_id_limiteportador': faker.random_int(),
            'lp_id_conta': faker.random_int(),
            'lp_portador': faker.random_int(),
            'lp_limite': faker.random_number(digits=5, fix_len=True),
            'lp_disponivel': faker.random_number(digits=5, fix_len=True),
            'lp_id_usuario': faker.random_int(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': random.choice(['INSERT', 'A_UPDATE']),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['limite_portador'].append(criar_limite_portador)

        criar_parcelamento_fatura = {
            'hash_key': faker.uuid4(),
            'source': str(faker.random_number(digits=14, fix_len=True)),
            'pf_id_parcelamento': faker.random_int(),
            'pf_id_conta': faker.random_int(),
            'pf_id_eventocompra': faker.random_int(),
            'pf_datavencimentopadrao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'pf_datamovimento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'pf_id_regracampanha': faker.random_int(),
            'pf_regra': faker.word(),
            'pf_statusadesao': faker.random_int(),
            'pf_descricaostatusadesao': faker.word(),
            'pf_id_servicotipo': faker.random_int(),
            'pf_tiposervico': faker.word(),
            'pf_totalparcelamento': faker.random_number(digits=5, fix_len=True),
            'pf_saldoatualfatura': faker.random_number(digits=5, fix_len=True),
            'pf_valorentrada': faker.random_number(digits=5, fix_len=True),
            'pf_flagcomentrada': faker.boolean(),
            'pf_dataprocessamentoadesao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'pf_quantidadeparcelas': faker.random_int(),
            'pf_valorparcela': faker.random_number(digits=5, fix_len=True),
            'pf_taxarefinanciamento': faker.random_number(digits=5, fix_len=True),
            'pf_custoefetivototal': faker.random_number(digits=5, fix_len=True),
            'pf_valoriof': faker.random_number(digits=5, fix_len=True),
            'pf_valortac': faker.random_number(digits=5, fix_len=True),
            'pf_valortotalrefinanciamento': faker.random_number(digits=5, fix_len=True),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': random.choice(['INSERT', 'A_UPDATE']),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['parcelamento_fatura'].append(criar_parcelamento_fatura)

        criar_produto = {
            'hash_key': faker.uuid4(),
            'source': faker.word(),
            'pr_id_produto': faker.random_int(),
            'pr_id_emissor': faker.random_int(),
            'pr_id_produtotipo': faker.random_int(),
            'pr_id_fantasiabasica': faker.random_int(),
            'pr_id_variante': faker.random_int(),
            'pr_bin': faker.random_int(),
            'pr_nome': faker.word(),
            'pr_descricao': faker.paragraph(),
            'pr_caracteristicas': faker.paragraph(),
            'pr_banco': faker.random_int(),
            'pr_agencia': faker.random_int(),
            'pr_contacorrente': faker.bothify(text='########'),
            'pr_carteira': faker.random_int(),
            'pr_cedente': faker.company(),
            'pr_especie': faker.word(),
            'pr_especiedoc': faker.word(),
            'pr_aceite': faker.word(),
            'pr_instrucoes': faker.paragraph(),
            'pr_localpagamento1': faker.word(),
            'pr_localpagamento2': faker.word(),
            'pr_proximonumerodocumento': faker.random_number(digits=5, fix_len=True),
            'pr_mensagemextrato': faker.paragraph(),
            'pr_nomeextrato': faker.word(),
            'pr_nomearquivoembossing': faker.word(),
            'pr_flagsituacaoproduto': faker.boolean(),
            'pr_codigocedente': faker.word(),
            'pr_codigoarquivocarteira': faker.word(),
            'pr_nomearquivoextrato': faker.word(),
            'pr_id_plasticodefault': faker.random_int(),
            'pr_flagpersonalizado': faker.word(),
            'pr_propostaproduto': faker.boolean(),
            'pr_bancoacordo': faker.random_int(),
            'pr_agenciaacordo': faker.random_int(),
            'pr_contacorrenteacordo': faker.bothify(text='########'),
            'pr_carteiraacordo': faker.random_int(),
            'pr_flagcpfembossing': faker.boolean(),
            'pr_id_tipoproduto': faker.random_int(),
            'pr_codigoproduto': faker.word(),
            'pr_logo': faker.word(),
            'pr_id_bandeira': faker.random_int(),
            'pr_id_cliente': faker.random_int(),
            'pr_codigocedenteacordo': faker.word(),
            'pr_instrucoesacordo': faker.paragraph(),
            'pr_validacaoregrasenha': faker.random_int(),
            'pr_bancofatcarona': faker.random_int(),
            'pr_agenciafatcarona': faker.random_int(),
            'pr_contacorrentefatcarona': faker.bothify(text='########'),
            'pr_carteirafatcarona': faker.random_int(),
            'pr_codigocedentefatcarona': faker.word(),
            'pr_especiedocfatcarona': faker.word(),
            'pr_aceitefatcarona': faker.word(),
            'pr_localpagamento1fatcarona': faker.word(),
            'pr_id_servicecode': faker.random_int(),
            'pr_id_bancoagenciaconta': faker.random_int(),
            'pr_id_bancoagenciaconta_acordos': faker.random_int(),
            'tpr_id_tipoproduto': faker.random_int(),
            'tpr_descricao': faker.word(),
            'tpr_flagcreditobeneficio': faker.boolean(),
            'tpr_flagconsignado': faker.boolean(),
            'tpr_flagprepago': faker.boolean(),
            'tpr_id_perfilacessousuario': faker.random_int(),
            'tpr_flagantecipacao': faker.boolean(),
            'tpr_flagcompraprogramada': faker.boolean(),
            'sc_id_servicecode': faker.random_int(),
            'sc_servicecode': faker.word(),
            'sc_descricao': faker.word(),
            'sc_flagativo': faker.boolean(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': random.choice(['INSERT', 'A_UPDATE']),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['produto'].append(criar_produto)

        criar_refinanciamento = {
            'hash_key': faker.uuid4(),
            'source': str(faker.random_number(digits=14, fix_len=True)),
            'rf_id_refinanciamento': faker.random_int(),
            'rf_id_conta': faker.random_int(),
            'rf_id_eventocompra': faker.random_int(),
            'rf_datarefinanciamento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'rf_rotativopagajuros': faker.random_number(digits=5, fix_len=True),
            'rf_debitosfaturadosprox': faker.random_number(digits=5, fix_len=True),
            'rf_totalposprox': faker.random_number(digits=5, fix_len=True),
            'rf_totalrefinanciado': faker.random_number(digits=5, fix_len=True),
            'rf_numeroparcelas': faker.random_int(),
            'rf_valorparcela': faker.random_number(digits=5, fix_len=True),
            'rf_taxajuros': faker.random_number(digits=5, fix_len=True),
            'rf_valoriof': faker.random_number(digits=5, fix_len=True),
            'rf_cet': faker.random_number(digits=5, fix_len=True),
            'rf_responsavel': faker.word(),
            'rf_status': faker.random_int(),
            'rf_valorantecipacaopendente': faker.random_number(digits=5, fix_len=True),
            'rf_valorparcelasfuturas': faker.random_number(digits=5, fix_len=True),
            'rf_valorabatimentojuros': faker.random_number(digits=5, fix_len=True),
            'rf_flagsaldototal': faker.boolean(),
            'rf_totalarefinanciar': faker.random_number(digits=5, fix_len=True),
            'rf_statuscashback': faker.random_int(),
            'rf_percentualcashback': faker.random_number(digits=5, fix_len=True),
            'rf_valorcashback': faker.random_number(digits=5, fix_len=True),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': random.choice(['INSERT', 'A_UPDATE']),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['refinanciamento'].append(criar_refinanciamento)

        criar_seguro_adesao_item = {
            'hash_key': faker.uuid4(),
            'source': str(faker.random_number(digits=14, fix_len=True)),
            'asi_id_adesaoseguroitem': faker.random_int(),
            'asi_id_adesaoseguro': faker.random_int(),
            'asi_id_pessoa': faker.random_int(),
            'asi_cd_item': faker.random_int(),
            'asi_dt_iniciovigencia': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'asi_dt_terminovigencia': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'asi_fl_titular': faker.boolean(),
            'asi_tp_statusintegracao': faker.random_int(),
            'asi_dt_exclusao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'asi_dt_adesao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': random.choice(['INSERT', 'UPDATE']),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['seguro_adesao_item'].append(criar_seguro_adesao_item)

        criar_seguro_endereco = {
            'hash_key': faker.uuid4(),
            'source': str(faker.random_number(digits=14, fix_len=True)),
            'id_endereco': faker.random_int(),
            'nm_logradouro': faker.street_name(),
            'no_logradouro': faker.building_number(),
            'dc_complemento': generate_secondary_address(),
            'nm_bairro': faker.street_name(),
            'nm_municipio': faker.city(),
            'cd_uf': faker.state_abbr(),
            'no_cep': faker.postcode(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': random.choice(['INSERT']),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['seguro_endereco'].append(criar_seguro_endereco)

        criar_seguro_pessoa = {
            'hash_key': faker.uuid4(),
            'source': str(faker.random_number(digits=14, fix_len=True)),
            'pes_id_pessoa': faker.random_int(),
            'pes_nm_pessoa': faker.name(),
            'pes_no_cpf': faker.bothify(text='###########'),
            'pes_dt_nascimento': faker.date_of_birth().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'pes_tp_sexo': faker.random_int(min=1, max=2),
            'pes_nm_mae': faker.name(),
            'pes_no_rg': faker.bothify(text='########'),
            'pes_dt_emissaorg': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d'),
            'pes_cd_uf_rg': faker.state_abbr(),
            'pes_no_pis': faker.bothify(text='###########'),
            'pes_no_cns': faker.bothify(text='###########'),
            'pes_no_declaracaonascidovivo': faker.bothify(text='###########'),
            'pes_tp_estadocivil': faker.random_int(min=1, max=9),
            'pes_tp_grauparentesco': faker.random_int(min=1, max=8),
            'pes_id_endereco': faker.random_int(),
            'pes_id_contato': faker.random_int(),
            'pes_tp_pessoa': 'F',
            'fl_apenasresponsavelfinanceiro': faker.boolean(),
            'id_integracaoparceiro': faker.random_int(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': random.choice(['INSERT', 'UPDATE']),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['seguro_pessoa'].append(criar_seguro_pessoa)

        criar_transacao_corrente = {
            'hash_key': faker.uuid4(),
            'source': str(faker.random_number(digits=14, fix_len=True)),
            'tc_id_transacao': faker.random_int(),
            'tc_id_tipotransacao': faker.random_int(),
            'tc_id_emissor': faker.random_int(),
            'tc_id_produto': faker.random_int(),
            'tc_id_conta': faker.random_int(),
            'tc_portador': faker.random_int(),
            'tc_sequencialcartao': faker.random_int(),
            'tc_datavencimentoreal': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'tc_datavencimentopadrao': faker.date_object().strftime('%d/%m/%Y'),
            'tc_datageracao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'tc_valor': faker.random_number(digits=5, fix_len=True),
            'tc_historico': faker.word(),
            'tc_statuscontabil': faker.random_int(),
            'tc_statusgerencial': faker.random_int(),
            'tc_id_eventoexterno': faker.random_int(),
            'tc_dataorigem': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'tc_statusconta': faker.random_int(),
            'tc_faturado': faker.random_int(),
            'tc_id_estabelecimento': faker.random_int(),
            'tc_datafaturamento': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'tc_complemento': faker.word(),
            'tc_id_transacaoestorno': faker.random_int(),
            'tc_flagestornado': faker.random_int(),
            'tc_parcela': faker.random_int(),
            'tc_plano': faker.random_int(),
            'tc_id_estabelecimento_visa': faker.random_int(),
            'tc_id_planocredito': faker.random_int(),
            'tc_id_processoprocedure': faker.random_int(),
            'tc_datavencpadrao': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'tc_id_taxajurosapropriacao': faker.random_int(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
            'operation': random.choice(['INSERT', 'A_UPDATE']),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d')
        }
        data['transacao_corrente'].append(criar_transacao_corrente)

        criar_Debito_recorrente = {
            'hash_key': faker.uuid4(),
            'source': faker.word(),
            'cd_id_conta': faker.random_int(),
            'cd_id_tipodebitorecorrente': faker.random_int(),
            'cd_datainicio': faker.date_time().strftime('%Y-%m-%d %H:%M:%S'),
            'cd_datafim': faker.date_time().strftime('%Y-%m-%d %H:%M:%S'),
            'cd_status': faker.random_int(),
            'cd_arquivoenvio': faker.word(),
            'cd_combinacao': faker.random_int(),
            'cd_flagsinistro': faker.random_int(),
            'cd_dataultimopagamento': faker.date_time().strftime('%Y-%m-%d %H:%M:%S'),
            'cd_id_usuario': faker.random_int(),
            'cd_login': faker.word(),
            'cd_origem': faker.word(),
            'cd_numerociclo': faker.random_int(),
            'cd_id_promotorvenda': faker.random_int(),
            'cd_datafinalvigencia': faker.date_time().strftime('%Y-%m-%d %H:%M:%S'),
            'cd_contadornaopgto': faker.random_int(),
            'cd_contadornaopgtoconsec': faker.random_int(),
            'cd_flagpagamento': faker.boolean(),
            'cd_flagadesao': faker.boolean(),
            'cd_flagnumsorte': faker.boolean(),
            'cd_id_tipoenderecorisco': faker.random_int(),
            'cd_nomeestabelecimento': faker.company(),
            'cd_id_motivo': faker.random_int(),
            'cd_id_contadebitorecorrente': faker.random_int(),
            'cd_dataproximoenvio': faker.date_time().strftime('%Y-%m-%d %H:%M:%S'),
            'cd_parcelapedida': faker.random_int(),
            'td_id_tipodebitorecorrente': faker.random_int(),
            'td_descricao': faker.paragraph(),
            'td_tipocarta': faker.random_int(),
            'td_valor': faker.pyfloat(),
            'td_flagestornoautomatico': faker.boolean(),
            'td_flagativo': faker.boolean(),
            'td_flagopcional': faker.boolean(),
            'td_numeroapolice': faker.word(),
            'td_flaggeranumerosorte': faker.boolean(),
            'td_vlrrepassadoseguradora': faker.pyfloat(),
            'td_flagseguro': faker.boolean(),
            'td_flaglancatransacao': faker.boolean(),
            'td_flagextratoincondicional': faker.boolean(),
            'td_flagdebitoincondicional': faker.boolean(),
            'td_flagadesaoautomatica': faker.boolean(),
            'td_faixaetaria': faker.word(),
            'td_sorteiosmensais': faker.word(),
            'td_descricaoapolice': faker.paragraph(),
            'td_flagadereautomatico': faker.boolean(),
            'td_id_termoseguroservico': faker.random_int(),
            'td_flaginserefila': faker.boolean(),
            'td_id_produto': faker.random_int(),
            'td_qtdtentativascobranca': faker.random_int(),
            'td_id_ajustes': faker.random_int(),
            'td_condicoesgeraissiteportadorcredito': faker.paragraph(),
            'td_flagtransfautomatica': faker.boolean(),
            'td_codigoprodutomapfre': faker.word(),
            'td_flaganuidadebonificada': faker.boolean(),
            'td_descricaoabreviada': faker.word(),
            'td_codigoclientemapfre': faker.word(),
            'td_codigoplanomapfre': faker.word(),
            'td_codigoempresamapfre': faker.word(),
            'td_valortitulomapfre': faker.pyfloat(),
            'td_flagdependente': faker.boolean(),
            'td_quantidadedependente': faker.random_int(),
            'td_id_grupo': faker.random_int(),
            'td_valorbonus': faker.pyfloat(),
            'td_numeroparcelas': faker.random_int(),
            'td_idademinima': faker.random_int(),
            'td_idademaxima': faker.random_int(),
            'dh_relatorio': faker.date_time().strftime('%Y-%m-%d %H:%M:%S'),
            'operation': faker.word(),
            'operation_sequence': faker.random_int(),
            'production_date': faker.date_time().strftime('%Y-%m-%dT%H:%M:%S+00:00'),
        }
        data['debito_recorrente'].append(criar_Debito_recorrente)
    jsonl_data(data=data)
    return data

num_records = input_num_linhas()
function_pfs_raw_conductor(num_records)